#!/usr/bin/python

import sys
import os
import re
import string
import time
import cxxtags_util

class CxxTagsCoreWrapper:
    mClangHome = ""
    mExcludeList = ""
    mOptCore = ""
    mIsEmptyMode = False
    mInFileList = []
    mOutFile = ""
    mTimeList = []
    mIsVerbose = 0

    def __init__(self):
        try:
            self.mClangHome = os.environ["CLANG_HOME"]
        except KeyError:
            None

    def printUsage(self):
        print "usage: cxxtags [-E, --empty] [-p, --partial] [-e,--exclude exclude_list] input_file out_dir [compiler_arguments]"

    # parse arguments.
    def parseArgs(self, argv):
        if len(argv) < 2:
            self.printUsage()
            sys.exit(1)
        i = 0
        while 1:
            if i >= len(argv):
                break
            arg = argv[i]
            if arg == "-e" or arg == "--exclude":
                self.mExcludeList = argv[i+1]
                del argv[i:i+2]
            elif arg == "-p" or arg == "--partial":
                self.mOptCore += " -p"
                del argv[i]
            elif arg == "-E" or arg == "--empty":
                self.mOptCore += " -E"
                self.mIsEmptyMode = True
                del argv[i]
            #elif arg == "-s" or arg == "--skel":
            #    self.mOptCore += " -s"
            #    del argv[i]
            elif arg == "-v":
                self.mIsVerbose = 1
                del argv[i]
            elif arg == "-o":
                #self.mOutFile = argv[i+1]
                #print "-o: "+self.mOutFile
                del argv[i:i+2]
            elif arg == "-D":
                # ignore "-D xxx" options
                # "-Dxxx" format is treated as another option.
                i += 2
            elif arg == "-I":
                # ignore "-I path" options
                # "-Ipath" format is treated as another option.
                i += 2
            elif arg == "-x" or arg == "-MF" or arg == "-MT":
                # ignore options that take an additional argument.
                i += 2
            elif re.search("^[^-]", arg):
                self.mInFileList.append(argv[i])
                #print "infile: "+in_file
                del argv[i]
            else:
                i+=1
        return argv

    def run(self):
        in_file = ""
        exe_dir = os.path.dirname(sys.argv[0])
        cur_dir = os.getcwd()

        # process args
        argv = self.parseArgs(sys.argv[1:])
        if argv == None:
            self.printUsage()
            sys.exit(1)
        if len(self.mInFileList) == 0:
            self.printUsage()
            sys.exit(1)
        out_dir = self.mInFileList[0]
        in_file = self.mInFileList[1]
        out_dir = os.path.abspath(out_dir)
        if out_dir != "" and not os.path.exists(out_dir):
            os.makedirs(out_dir)
        if len(self.mInFileList) > 2:
            #print "INFO: multiple input file are specified. empty file \"%s\" is generated."%(outfile)
            #fo = open(outfile, 'a+') # touch file
            #fo.close()
            print "ERROR: multiple file are specified"
            sys.exit(1)
        opt = ""

        if not os.path.exists(in_file):
            print "ERROR: file not found: %s\n"%(in_file)
            sys.exit(1)
        in_file = os.path.abspath(in_file)

        if self.mExcludeList != "":
            self.mExcludeList = "-e " + self.mExcludeList
        cmd = "%s/cxxtags_core %s %s %s %s %s "%(exe_dir, self.mOptCore, self.mExcludeList, cur_dir, out_dir, in_file)+string.join(argv)
        print(cmd)
        #self.mTimeList.append(time.time())
        rv = os.system(cmd)
        #self.mTimeList.append(time.time())

cxxtags = CxxTagsCoreWrapper()
cxxtags.run()
