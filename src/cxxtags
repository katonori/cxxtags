#!/usr/bin/python

import sys
import os
import re
import string
import time
import json
import subprocess

class CxxTagsCoreWrapper:
    mClangHome = ""
    mExcludeList = ""
    mOptCore = ""
    mIsEmptyMode = False
    mInFileList = []
    mOutFile = ""
    mTimeList = []
    mIsVerbose = 0
    mBuildOpt = ""
    mConfigFile = ".cxxtags/config.json"
    mHomeDir = ""

    def __init__(self):
        key = "CLANG_HOME"
        if os.environ.has_key(key):
            self.mClangHome = os.environ[key]
        key = "HOME"
        if os.environ.has_key(key):
            self.mHomeDir = os.environ[key]

        self.parseConfig()

    def parseConfig(self):
        if self.mHomeDir == "":
            return 
        self.mConfigFile = self.mHomeDir + "/" + self.mConfigFile
        try:
            f = open(self.mConfigFile)
        except Exception as e:
            return
        jd = json.load(f)
        if jd.has_key("build_opt"):
            self.mBuildOpt = jd["build_opt"]

    def printUsage(self):
        print "usage: cxxtags [-e,--exclude exclude_list] out_dir input_file -- [compiler_arguments]"

    # parse arguments.
    def parseArgs(self, argv):
        if len(argv) < 2:
            self.printUsage()
            sys.exit(1)
        i = 0
        while 1:
            if i >= len(argv):
                break
            arg = argv[i]
            if arg == "-e" or arg == "--exclude":
                self.mExcludeList = argv[i+1]
                i += 2
            elif arg == "-v":
                self.mIsVerbose = 1
                i += 1
            elif arg == "-f":
                self.mOptCore += " -f"
                i += 1
            elif arg == "--":
                # end of cxxtags arguments
                i += 1
                break
            else:
                self.mInFileList.append(arg)
                i += 1
        return argv[i:]

    def removeInputFileArg(self, argv):
        srcList = []
        i = 0
        while True:
            if i >= len(argv):
                break
            arg = argv[i]
            if arg == "-o":
                i += 2
            elif arg == "-D":
                # ignore "-D xxx" options
                # "-Dxxx" format is treated as another option.
                i += 2
            elif arg == "-I":
                # ignore "-I path" options
                # "-Ipath" format is treated as another option.
                i += 2
            elif arg == "-x" or arg == "-MF" or arg == "-MT":
                # ignore options that take an additional argument.
                i += 2
            elif arg.startswith("-"):
                i += 1
            else:
                srcList.append(arg)
                i += 1
        for a in srcList:
            argv.remove(a)
        return argv

    def run(self):
        in_file = ""
        exe_dir = os.path.dirname(sys.argv[0])
        cur_dir = os.getcwd()

        # process args
        argv = self.parseArgs(sys.argv[1:])
        argv = self.removeInputFileArg(argv)
        if argv == None:
            self.printUsage()
            sys.exit(1)
        if len(self.mInFileList) != 2:
            self.printUsage()
            sys.exit(1)
        out_dir = self.mInFileList[0]
        in_file = self.mInFileList[1]
        out_dir = os.path.abspath(out_dir)
        if out_dir != "" and not os.path.exists(out_dir):
            try:
                os.makedirs(out_dir)
            except OSError, e:
                if e.errno != 17:
                    raise   
                pass
        opt = ""

        if not os.path.exists(in_file):
            print "ERROR: file not found: %s\n"%(in_file)
            sys.exit(1)
        in_file = os.path.abspath(in_file)

        if self.mExcludeList != "":
            self.mExcludeList = "-e " + self.mExcludeList
        self.mBuildOpt += " " + " ".join(argv)
        cmd = "%s/cxxtags_core %s %s %s %s %s "%(os.path.abspath(exe_dir), self.mOptCore, self.mExcludeList, cur_dir, out_dir, in_file)+self.mBuildOpt
        #print cmd
        cmdList = re.split("\s+", cmd)
        p = subprocess.Popen(cmdList, shell=False)
        return p.wait()

if __name__ == "__main__":
    cxxtags = CxxTagsCoreWrapper()
    sys.exit(cxxtags.run())
