#!/usr/bin/python

import sys
import os
import re
import string
import time
import sqlite3
import cxxtags_util

exclude_list = ""
in_file_list = []
out_file = ""
time_list = []

def usage():
    print "usage: cxxtags [-e exception_list] [-o out_file] input_file [compiler_arguments]"

# parse arguments.
def parse_args(argv):
    global exclude_list
    global in_file_list
    global out_file
    i = 0
    while 1:
        if i >= len(argv):
            break
        arg = argv[i]
        if arg == "-e":
            exclude_list = argv[i+1]
            del argv[i:i+2]
        elif arg == "-o":
            out_file = argv[i+1]
            #print "-o: "+out_file
            del argv[i:i+2]
        elif arg == "-I":
            # ignore "-I path" options
            # "-Ipath" format is treated as another option.
            i += 2
        elif arg == "-x" or arg == "-MF" or arg == "-MT":
            # ignore options that take an additional argument.
            i += 2
        elif re.search("^[^-]", arg):
            in_file_list.append(argv[i])
            #print "infile: "+in_file
            del argv[i]
        else:
            i+=1
    return argv

########################################################
def main():
    global exclude_list
    global in_file_list
    global out_file
    global time_list
    in_file = ""
    exe_dir = os.path.dirname(sys.argv[0])

    # process args
    argv = parse_args(sys.argv[1:])
    if argv == None:
        usage()
        sys.exit(1)
    if len(in_file_list) == 0:
        print "ERROR: no input files are specified"
        sys.exit(1)
    in_file = in_file_list[0]
    if out_file == "":
        out_file = os.path.basename(in_file) + ".db"
    if len(in_file_list) > 1:
        print "INFO: multiple input file are specified. empty file \"%s\" is generated."%(out_file)
        fo = open(out_file, 'a+') # touch file
        fo.close()
        sys.exit(0)
    if re.match("^.+.o$", in_file):
        print "INFO: ignore input \"%s\". empty file \"%s\" is generated."%(in_file, out_file)
        fo = open(out_file, 'a+') # touch file
        fo.close()
        sys.exit(0)

    if not os.path.exists(in_file):
        print "ERROR: file not found: %s\n"%(in_file)
        sys.exit(1)
    in_file = os.path.abspath(in_file)

    # get current directory
    cur_dir = os.getcwd()
    if cur_dir == "":
        cur_dir = "."
    cur_dir = os.path.abspath(cur_dir) + "/"

    if exclude_list != "":
        exclude_list = "-e " + exclude_list
    if os.path.exists(out_file):
        os.remove(out_file)
    cmd = "%s/cxxtags_core %s %s %s %s "%(exe_dir, exclude_list, cur_dir, out_file, in_file)+string.join(argv)
    #print(cmd)
    #time_list.append(time.time())
    rv = os.system(cmd)
    if rv != 0:
        sys.exit(1)
    #time_list.append(time.time())

    # normalize paths
    db = cxxtags_util.db_connect(out_file)
    cur = db.cursor()
    cur.execute("SELECT * FROM file_list;")
    new_file_list = []
    for row in cur.fetchall():
        num, fn = row
        if fn != '':
            new_file_list.append((os.path.abspath(fn), num))
    cur.executemany(u"UPDATE file_list SET name=? WHERE id=?;", new_file_list)
    db.commit()
    db.close()
    #print "time:"
    #print "    proc0: ", time_list[1]-time_list[0]

###########
main()
