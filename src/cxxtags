#!/usr/bin/python

import sys
import os
import re
import string
import time
import sqlite3
import cxxtags_util
from elftools.elf.elffile import ELFFile

class CxxTagsCoreWrapper:
    mClangHome = ""
    mExcludeList = ""
    mOptPartial = ""
    mInFileList = []
    mOutFile = ""
    mTimeList = []
    mGuessOptions = 0

    def __init__(self):
        try:
            self.mClangHome = os.environ["CLANG_HOME"]
        except KeyError:
            None

    def printUsage(self):
        print "usage: cxxtags [-p, --partial] [-e,--exclude exclude_list] [-o out_file] input_file [compiler_arguments]"

    # parse arguments.
    def parseArgs(self, argv):
        if len(argv) < 2:
            self.printUsage()
            sys.exit(1)
        i = 0
        while 1:
            if i >= len(argv):
                break
            arg = argv[i]
            if arg == "-e" or arg == "--exclude":
                self.mExcludeList = argv[i+1]
                del argv[i:i+2]
            elif arg == "-p" or arg == "--partial":
                self.mOptPartial = "-p"
                del argv[i]
            elif arg == "-o":
                self.mOutFile = argv[i+1]
                #print "-o: "+self.mOutFile
                del argv[i:i+2]
            elif arg == "-I":
                # ignore "-I path" options
                # "-Ipath" format is treated as another option.
                i += 2
            elif arg == "-g":
                # guess compile options from DWARF information.
                # the input file must be an object file compile with -grecord-gcc-switches option.
                self.mGuessOptions = 1
                i += 1
            elif arg == "-x" or arg == "-MF" or arg == "-MT":
                # ignore options that take an additional argument.
                i += 2
            elif re.search("^[^-]", arg):
                self.mInFileList.append(argv[i])
                #print "infile: "+in_file
                del argv[i]
            else:
                i+=1
        return argv

    def getBuildOptions(self, filename):
        try:
            f = open(filename, 'rb')
            elffile = ELFFile(f)
            cl = elffile.get_section_by_name(".GCC.command.line")
            srcFile = ""
            opts = []
            if cl:
                lines = cl.data().split('\0')
                #print lines
                for l in lines:
                    if l.startswith('-I'):
                        l = l.replace('-I ', '-I')
                        opts.append(l)
                    elif l.startswith('-D'):
                        l = l.replace('-D ', '-D')
                        opts.append(l)
                    elif re.match('[^-]', l):
                        srcFile = l
        except IOError, (errno, strerror):
            raise IOError(errno, strerror + ": " + filename)
        except:
            return ("", "")
        return (srcFile, ' '.join(opts))

    def run(self):
        in_file = ""
        exe_dir = os.path.dirname(sys.argv[0])
        cur_dir = os.getcwd()

        # process args
        argv = self.parseArgs(sys.argv[1:])
        if argv == None:
            self.printUsage()
            sys.exit(1)
        if len(self.mInFileList) == 0:
            self.printUsage()
            sys.exit(1)
        in_file = self.mInFileList[0]
        outfile = self.mOutFile
        if outfile == "":
            outfile = os.path.basename(in_file) + ".db"
        if len(self.mInFileList) > 1:
            print "INFO: multiple input file are specified. empty file \"%s\" is generated."%(outfile)
            fo = open(outfile, 'a+') # touch file
            fo.close()
            sys.exit(0)
        opt = ""
        if self.mGuessOptions != 0:
            (in_file, opt) = self.getBuildOptions(in_file)
            if opt == "" or in_file == "":
                print("ERROR: could not build option from elf information")
                sys.exit(1)

        if not os.path.exists(in_file):
            print "ERROR: file not found: %s\n"%(in_file)
            sys.exit(1)
        in_file = os.path.abspath(in_file)

        if self.mExcludeList != "":
            self.mExcludeList = "-e " + self.mExcludeList
        if os.path.exists(outfile):
            os.remove(outfile)
        if self.mGuessOptions == 0:
            cmd = "%s/cxxtags_core %s %s %s %s %s "%(exe_dir, self.mOptPartial, self.mExcludeList, cur_dir, outfile, in_file)+string.join(argv)
        else:
            clangIncludePath = ""
            if self.mClangHome == "":
                print "WARNIGN: environment variable CLANG_HOME is not set. This may cause build error."
            else:
                clangIncludePath = '-I' + self.mClangHome + '/include/ '
            cmd = "%s/cxxtags_core %s %s %s %s %s "%(exe_dir, self.mOptPartial, self.mExcludeList, cur_dir, outfile, in_file) + ' '.join(argv) + ' ' + clangIncludePath + opt
            print(cmd)
        #print(cmd)
        #self.mTimeList.append(time.time())
        rv = os.system(cmd)
        if rv != 0:
            sys.exit(1)
        #self.mTimeList.append(time.time())

        # normalize paths
        db = cxxtags_util.db_connect(outfile)
        cur = db.cursor()
        cur.execute("SELECT * FROM file_list;")
        new_file_list = []
        for row in cur.fetchall():
            num, fn = row
            if fn != '':
                new_file_list.append((os.path.abspath(fn), num))
        cur.executemany(u"UPDATE file_list SET name=? WHERE id=?;", new_file_list)
        db.commit()
        db.close()
        #print "time:"
        #print "    proc0: ", self.mTimeList[1]-self.mTimeList[0]

cxxtags = CxxTagsCoreWrapper()
cxxtags.run()
