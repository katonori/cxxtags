#!/usr/bin/python

import sys
import os
#import time
import shutil
import sqlite3
import cxxtags_util
import getopt

DB_VER = 6
CONTAINED_PART_FULL = 0
CONTAINED_PART_PARTIAL = 1

def print_usage():
    print "usage: cxxtags_db_manager add     database_dir input_files [...]"
    print "     :                    rebuild [-f,--force] [-p,--partial] database_dir src_file_name"

########## add ###########
def add(funcArgv):
    output_dir = funcArgv[0]
    input_files = funcArgv[1:]
    file_index = output_dir + "/file_index.db"
    # make output dir
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)

    # open file index db
    try:
        db_idx = sqlite3.connect(file_index, isolation_level='EXCLUSIVE')
        cur_idx = db_idx.cursor()
        cur_idx.execute(
                """
                CREATE TABLE IF NOT EXISTS file_index(
                    file_name TEXT,
                    is_src INTEGER,
                    db_file TEXT
                    );
                """
             )
        cur_idx.execute("CREATE TABLE IF NOT EXISTS db_info(db_format INTEGER);")
        cur_idx.execute("SELECT * FROM db_info;")
        if not cur_idx.fetchall():
            cur_idx.execute("INSERT INTO db_info VALUES('%d');"%(DB_VER))
    except sqlite3.Error, e:
        print "ERROR: file_index: ", e.args[0]
        db_idx.close()
        sys.exit(1)

    for fn in input_files:
        src_file = ""
        try:
            # open db
            db_in = sqlite3.connect(fn, isolation_level='EXCLUSIVE')
            cur_in = db_in.cursor()
            # get main source file name
            cur_in.execute("SELECT src_file_name FROM db_info;")
            src_file = cur_in.fetchone()[0]

            # decide target file name
            tgt_fn = ""
            tgt_basename = ""
            cur_idx.execute("SELECT db_file FROM file_index WHERE file_name=?;", (src_file,));
            row = cur_idx.fetchone()
            if row: # if already registered
                tgt_basename, = row
                tgt_fn = output_dir + "/" + tgt_basename
                # delete old entries
                cur_idx.execute("DELETE FROM file_index WHERE db_file=?;", (tgt_basename,));
            else:
                tgt_fn = output_dir + "/" + os.path.basename(fn)
                # change file name if it already exists.
                num = 0
                while os.path.exists(tgt_fn):
                    path, ext = os.path.splitext(tgt_fn)
                    tgt_fn = path + ".%d"%(num) + ext
            shutil.move(fn, tgt_fn)

            # get all the file(include header files) name
            all_files = {}
            value_list = []
            tgt_base_fn = os.path.basename(tgt_fn)
            cur_in.execute("SELECT name FROM file_list;")
            for f in cur_in.fetchall():
                fn = f[0]
                if fn != "" and not all_files.has_key(fn):
                    is_src = 0
                    if fn == src_file:
                        is_src = 1
                    all_files[fn] = is_src
                    #db_idx.execute("INSERT INTO file_index VALUES('" + f[0] + "', " + str(is_src) + ", '" +  os.path.basename(tgt_fn) + "');")
                    value_list.append((fn, is_src, tgt_base_fn))
            cur_idx.executemany("INSERT INTO file_index VALUES(?, ?, ?);", value_list)
            db_in.close()
        except sqlite3.Error, e:
            print "ERROR: input db: %s:"%(fn), e.args[0]
            sys.exit(1)

    cur_idx.execute("CREATE INDEX IF NOT EXISTS file_name_idx ON file_index(file_name);")
    db_idx.commit()
    db_idx.close()

########## rebuild ###########
class rebuildHandler():
    mDatabaseDir = "" 
    mInSrcFileName = "" 
    mActualSrcFileName = "" 
    mFileIndex = ""
    mDbFile = ""
    mIsForce = 0
    mIsPartial = 0

    def ParseArg(self, args):
        optlist, args = getopt.getopt(args, 'fp', ['force','partial'])
        for i in optlist:
            opt, val = i
            if opt == "--force" or opt == "-f":
                self.mIsForce = 1
            elif opt == "--partial" or opt == "-p":
                self.mIsPartial = 1
            else:
                print "ERROR: no such option: " + opt
                print_usage()
                sys.exit(1)
        self.mDatabaseDir = args[0]
        if not os.path.exists(self.mDatabaseDir):
            print "ERROR: database dir \"%s\" does not exists."%(self.mDatabaseDir)
            sys.exit(1) 
        self.mInSrcFileName = args[1]
        self.mFileIndex = self.mDatabaseDir + "/file_index.db"
        #print "ParseArg: %s, %s"%(self.mInSrcFileName, self.mFileIndex)

    def GetDbFileFromSrcName(self):
        try:
            db_idx = sqlite3.connect(self.mFileIndex, isolation_level='EXCLUSIVE')
            cur_idx = db_idx.cursor()
            cur_idx.execute("SELECT file_name, db_file FROM file_index WHERE file_name LIKE ?", ('%'+self.mInSrcFileName,))
            dbFileName = ""
            lastSrcFileName = ""
            for i in cur_idx.fetchall():
                resFileName, resDbFile = i
                if cxxtags_util.pathCmp(resFileName, self.mInSrcFileName):
                    if lastSrcFileName != "" and lastSrcFileName != resFileName:
                        print "ERROR: file name is ambiguous. specify as absolute path."
                        sys.exit(1)
                    lastSrcFileName = resFileName
                    dbFileName = self.mDatabaseDir + "/" + resDbFile
            self.mActualSrcFileName = lastSrcFileName 
            db_idx.close()
            #print "dbFileName: %s"%(dbFileName)
            self.mDbFile = dbFileName
            return self.mDbFile
        except sqlite3.Error, e:
            print "ERROR: get file name: ", e.args[0]
            db_idx.close()
            sys.exit(1)

    #
    # get build options from database.
    #
    def GetBuildOption(self):
        try:
            db = sqlite3.connect(self.mDbFile, isolation_level='EXCLUSIVE')
            cur = db.cursor()
            cur.execute("SELECT exclude_list, contained_part, build_dir, build_options FROM db_info")
            row = cur.fetchone()
            if row:
                db.close()
                return row
            db.close()
            return None
        except sqlite3.Error, e:
            print "ERROR: get build option: " + self.mDbFile + ": " + e.args[0]
            db.close()
            sys.exit(1)

    def DoRebuild(self, excludeList, buildDir, buildOptions):
        tmpfile = "/tmp/cxxtags.tmp.o." + str(os.getpid())
        if excludeList != "":
            excludeList = "-e " + excludeList
        partialOpt = ""
        if self.mIsPartial:
            partialOpt = "-p"
        buildOptions = buildOptions.replace('-g', '')
        cmd = "cd " + buildDir + " && cxxtags " + partialOpt + " " + excludeList + " " + self.mActualSrcFileName + " -o " + tmpfile + " " + buildOptions
        print "CMD: " + cmd
        rv = -1
        try:
            rv = os.system(cmd)
        finally:
            if rv != 0:
                print "ERROR: build failed: " + cmd
                shutil.remove(tmpfile)
                sys.exit(1)
        shutil.move(tmpfile, self.mDbFile)
        return 0

    def Run(self, args):
        self.ParseArg(args)

        if "" == self.GetDbFileFromSrcName():
            print "ERROR: counld not find database file."
            sys.exit(1)
        res = self.GetBuildOption()
        if res:
            excludeList, containedPart, buildDir, buildOptions = res
            after = 0
            if self.mIsPartial:
                after = CONTAINED_PART_PARTIAL
            else:
                after = CONTAINED_PART_FULL
            if self.mIsForce == 0 and (containedPart == after):
                print "INFO: database was not updated."
                return 
            self.DoRebuild(excludeList, buildDir, buildOptions)

########## main ###########
def main():
    if len(sys.argv) <= 2:
        print_usage()
        sys.exit(1)
    mode = sys.argv[1]
    if mode == "add":
        add(sys.argv[2:])
    elif mode == "rebuild":
        handler = rebuildHandler()
        handler.Run(sys.argv[2:])
    else:
        print_usage()
        sys.exit(1)
######
main()
