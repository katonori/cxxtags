#!/usr/bin/python

import sys
import os
#import time
import shutil
import sqlite3
import cxxtags_util
import getopt
import traceback
import tempfile
import time

DB_VER = 7
CONTAINED_PART_FULL = 0
CONTAINED_PART_PARTIAL = 1

SCRIPT_DIR = os.path.dirname(__file__)

gErr = 0;
gVerboseMode = 0

def DEBUG_PRINT(str):
    global gVerboseMode
    if gVerboseMode != 0:
        print str

def print_usage():
    print "usage: cxxtags_db_manager add     database_dir input_files [...]"
    print "     :                    rebuild [-f,--force] [-p,--partial] database_dir src_file_name"

class AddHandler():
    mFileInfoDb = None
    mOutputDir = ""
    mMainDb = []
    def ParseArg(self, args):
        return args

    def Run(self, funcArgv):
        funcArgv = self.ParseArg(funcArgv)
        output_dir = funcArgv[0]
        self.mOutputDir = output_dir
        input_files = funcArgv[1:]
        file_index = output_dir + "/" + cxxtags_util.FILE_INDEX_FILE_NAME
        # make output dir
        if not os.path.exists(output_dir):
            os.mkdir(output_dir)

        # open file index db
        try:
            db_idx = sqlite3.connect(file_index, isolation_level='EXCLUSIVE')
            cur_idx = db_idx.cursor()
            self.mFileInfoDb = db_idx
            cur_idx.execute(
                    """
                    CREATE TABLE IF NOT EXISTS file_index(
                        file_name TEXT,
                        is_src INTEGER,
                        db_file TEXT
                        );
                    """
                )
            cur_idx.execute("CREATE TABLE IF NOT EXISTS db_info(db_format INTEGER);")
            cur_idx.execute("SELECT * FROM db_info;")
            row =  cur_idx.fetchone()
            if not row:
                cur_idx.execute("INSERT INTO db_info VALUES('%d');"%(DB_VER))

        except sqlite3.Error, e:
            print "ERROR: file_index: ", e.args[0]
            db_idx.close()
            sys.exit(1)

        for fn in input_files:
            self.ProcOneFile(fn)

        cur_idx.execute("CREATE INDEX IF NOT EXISTS file_name_idx ON file_index(file_name);")
        db_idx.commit()
        db_idx.close()

    def AddSuffix(self, fn):
        num = 0
        tgt_fn = fn
        while os.path.exists(tgt_fn):
            path, ext = os.path.splitext(tgt_fn)
            tgt_fn = path + ".%d"%(num) + ext
        return tgt_fn

    def DecideTargetFIleName(self, db_file_name, src_file_name):
        #print "decide: " + db_file_name + ", " + src_file_name
        output_dir = self.mOutputDir
        file_list_idx = self.mFileInfoDb.cursor()
        tgt_fn = ""
        tgt_basename = ""
        file_list_idx.execute("SELECT db_file FROM file_index WHERE file_name=?;", (src_file_name,));
        row = file_list_idx.fetchone()
        if row: # if already registered
            tgt_basename, = row
            tgt_fn = output_dir + "/" + tgt_basename
            # delete old entries
            file_list_idx.execute("DELETE FROM file_index WHERE db_file=?;", (tgt_basename,));
            #print "already exists"
        else:
            tgt_fn = output_dir + "/" + os.path.basename(db_file_name)
            # change file name if it already exists.
            tgt_fn = self.AddSuffix(tgt_fn)
        return tgt_fn

    def ProcOneFile(self, db_file_name):
        if 0 == os.path.getsize(db_file_name):
            print "INFO: skip an empty file: " + db_file_name
            return
        done = 0
        src_file = ""
        file_list_idx = self.mFileInfoDb.cursor()
        tgt_fn = ""
        try:
            # open db
            db_in = sqlite3.connect(db_file_name, isolation_level='EXCLUSIVE')
            cur_in = db_in.cursor()
            # get main source file name
            cur_in.execute("SELECT src_file_name FROM db_info;")
            src_file = cur_in.fetchone()[0]

            # decide target file name
            tgt_fn = self.DecideTargetFIleName(db_file_name, src_file)
            shutil.move(db_file_name, tgt_fn)
            #shutil.copy(db_file_name, tgt_fn)
            self.mMainDb = sqlite3.connect(tgt_fn, isolation_level='EXCLUSIVE')

            # get all the file(include header files) name
            all_files = {}
            value_list = []
            tgt_base_fn = os.path.basename(tgt_fn)
            cur_in.execute("SELECT name FROM file_list;")
            for f in cur_in.fetchall():
                fn = f[0]
                if fn != "" and not all_files.has_key(fn):
                    is_src = 0
                    if fn == src_file:
                        is_src = 1
                    all_files[fn] = is_src
                    #db_idx.execute("INSERT INTO file_index VALUES('" + f[0] + "', " + str(is_src) + ", '" +  os.path.basename(tgt_fn) + "');")
                    value_list.append((fn, is_src, tgt_base_fn))
            file_list_idx.executemany("INSERT INTO file_index VALUES(?, ?, ?);", value_list)
            self.mMainDb.execute("VACUUM;")
            db_in.close()
        except sqlite3.Error, e:
            print "ERROR: input db: %s, %s:"%(db_file_name, tgt_fn), e.args[0]
            raise e

########## rebuild ###########
class RebuildHandler():
    mDatabaseDir = ""
    mInSrcFileNameList = []
    mFileIndex = ""
    mDbFile = ""
    mIsForce = 0
    mIsPartial = 0
    mCxxtagsOpt = ""
    mInDb = None

    def ParseArg(self, args):
        #optlist, args = getopt.getopt(args, 'fps', ['force','partial','skel'])
        optlist, args = getopt.getopt(args, 'fp', ['force','partial','skel'])
        for i in optlist:
            opt, val = i
            if opt == "--force" or opt == "-f":
                self.mIsForce = 1
            #elif opt == "--skel" or opt == "-s":
            #    self.mCxxtagsOpt += " -s "
            elif opt == "--partial" or opt == "-p":
                self.mCxxtagsOpt += " -p "
            else:
                print "ERROR: no such option: " + opt
                print_usage()
                sys.exit(1)
        self.mDatabaseDir = args[0]
        if not os.path.exists(self.mDatabaseDir):
            print "ERROR: database dir \"%s\" does not exists."%(self.mDatabaseDir)
            sys.exit(1)
        if len(args) == 2:
            self.mInSrcFileNameList.append(args[1])
        elif len(args) == 1: # rebuild the all files
            self.mInSrcFileNameList = cxxtags_util.get_src_file_list(self.mDatabaseDir)
        else:
            print "ERROR: invalid arguments: " + " ".join(args)
            sys.exit(1)

        self.mFileIndex = self.mDatabaseDir + "/file_index.db"
        #print "ParseArg: %s, %s"%(self.mInSrcFileName, self.mFileIndex)

    def GetDbFileFromSrcName(self, src_file):
        try:
            db_idx = sqlite3.connect(self.mFileIndex, isolation_level='EXCLUSIVE')
            cur_idx = db_idx.cursor()
            cur_idx.execute("SELECT file_name, db_file FROM file_index WHERE file_name LIKE ?", ('%'+src_file,))
            dbFileName = ""
            lastSrcFileName = ""
            for i in cur_idx.fetchall():
                resFileName, resDbFile = i
                DEBUG_PRINT("src: " + resFileName + "," + src_file)
                if cxxtags_util.pathCmp(resFileName, src_file):
                    if lastSrcFileName != "" and lastSrcFileName != resFileName:
                        print "ERROR: file name is ambiguous. specify as absolute path."
                        sys.exit(1)
                    lastSrcFileName = resFileName
                    dbFileName = self.mDatabaseDir + "/" + resDbFile
            db_idx.close()
            DEBUG_PRINT("dbFileName: %s"%(dbFileName))
            self.mDbFile = dbFileName
            return self.mDbFile
        except sqlite3.Error, e:
            print "ERROR: get file name: ", e.args[0]
            db_idx.close()
            sys.exit(1)

    #
    # get build options from database.
    #
    def GetBuildOption(self):
        global gErr
        try:
            db = sqlite3.connect(self.mDbFile, isolation_level='EXCLUSIVE')
            self.mInDb = db
            cur = db.cursor()
            cur.execute("SELECT src_file_name, exclude_list, contained_part, build_dir, build_options FROM db_info")
            row = cur.fetchone()
            if row:
                DEBUG_PRINT("opt: " + str(row))
                return row
            return None
        except sqlite3.Error, e:
            print "ERROR: get build option: " + self.mDbFile + ": " + e.args[0]
            db.close()
            gErr += 1
            return None

    def DoRebuild(self, mainSrcFile, excludeList, buildDir, buildOptions, src_file):
        global gErr
        #startRebuild = time.time() 
        tmpfile = tempfile.NamedTemporaryFile(delete=False)
        if excludeList != "":
            excludeList = "-e " + excludeList
        partialOpt = ""
        buildOptions = buildOptions.replace('-g', '')
        cmd = "cd " + buildDir + " && " + SCRIPT_DIR + "/cxxtags " + self.mCxxtagsOpt + " " + excludeList + " " + mainSrcFile + " -o " + tmpfile.name + " " + buildOptions
        DEBUG_PRINT("CMD: " + cmd)
        rv = -1
        try:
            rv = os.system(cmd)
        finally:
            if rv != 0:
                print "ERROR: build failed: " + cmd
                #os.remove(tmpfile.name)
                gErr += 1
        #endRebuild = time.time() 
        dbIn = sqlite3.connect(tmpfile.name, isolation_level='EXCLUSIVE')
        self.UpdateFilelist(self.mDbFile, src_file, dbIn.cursor())
        dbIn.close()
        #shutil.copy(tmpfile.name, self.mDbFile)
        shutil.move(tmpfile.name, self.mDbFile)
        #endAll = time.time() 
        return 0

    def UpdateFilelist(self, tgt_fn, src_file, db_cursor):
        global gErr
        all_files = {}
        value_list = []
        tgt_base_fn = os.path.basename(tgt_fn)
        db_idx = None
        try:
            db_cursor.execute("SELECT name FROM file_list;")
            for f in db_cursor.fetchall():
                fn = f[0]
                if fn != "" and not all_files.has_key(fn):
                    is_src = 0
                    if fn == src_file:
                        is_src = 1
                    all_files[fn] = is_src
                    value_list.append((fn, is_src, tgt_base_fn))

            file_index = self.mDatabaseDir + "/" + cxxtags_util.FILE_INDEX_FILE_NAME
            db_idx = sqlite3.connect(file_index, isolation_level='EXCLUSIVE')
            cur_idx = db_idx.cursor()
            DEBUG_PRINT("tgt_fn: " + str(tgt_fn))
            cur_idx.execute("DELETE FROM file_index WHERE db_file=?;", (tgt_fn,));
            cur_idx.executemany("INSERT INTO file_index VALUES(?, ?, ?);", value_list)
            db_idx.commit()
            db_idx.close()
        except sqlite3.Error, e:
            print "ERROR: %s, %s: "%(tgt_fn, src_file) + e.args[0]
            if db_idx:
                db_idx.close()
            gErr += 1

    def Run(self, args):
        self.ParseArg(args)
        for f in self.mInSrcFileNameList:
            DEBUG_PRINT("Processing: " + f)
            if "" == self.GetDbFileFromSrcName(f):
                print "ERROR: counld not find database file.: " + f
                sys.exit(1)
            res = self.GetBuildOption()
            if res:
                mainSrcFile, excludeList, containedPart, buildDir, buildOptions = res
                self.DoRebuild(mainSrcFile, excludeList, buildDir, buildOptions, f)
                self.mInDb.close()

########## main ###########
def main():
    global gVerboseMode

    if len(sys.argv) <= 2:
        print_usage()
        sys.exit(1)

    # get global options
    gVerboseMode = 0
    try:
        optlist, argv = getopt.getopt(sys.argv[1:], 'v', [])
        for opt, val in optlist:
            if opt == "-v":
                gVerboseMode = 1
    except getopt.GetoptError, e:
        print "ERROR: getopt: ", e.args[0]
        sys.exit(1)

    mode = argv[0]
    if mode == "add":
        handler = AddHandler()
        handler.Run(argv[1:])
    elif mode == "rebuild":
        handler = RebuildHandler()
        handler.Run(argv[1:])
    else:
        print_usage()
        sys.exit(1)
    return gErr
######
sys.exit(main())
