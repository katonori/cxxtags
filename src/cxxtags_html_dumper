#!/usr/bin/python
""" Usage: call with <db_file>
"""

import sys
import os
import re
import string
import shutil
import sqlite3
import time
import fpformat
import cxxtags_util

TXT_DELIM = '\1'
FILE_INDEX_DB_NAME = "file_index.db"

KEYWORDS = [
    "asm",
    "auto",
    "bool",
    "break",
    "case",
    "catch",
    "char",
    "class",
    "const",
    "const_cast",
    "continue",
    "default",
    "delete",
    "do",
    "double",
    "dynamic_cast",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "float",
    "for",
    "friend",
    "goto",
    "if",
    "inline",
    "int",
    "long",
    "mutable",
    "namespace",
    "new",
    "operator",
    "private",
    "protected",
    "public",
    "register",
    "reinterpret_cast",
    "return",
    "short",
    "signed",
    "sizeof",
    "static",
    "static_cast",
    "struct",
    "switch",
    "template",
    "this",
    "throw",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "unsigned",
    "using",
    "virtual",
    "void",
    "volatile",
    "wchar_t",
    "while",
]

JS_FILE_NAME = "view.js"
JS_SRC = u"""
<!--
var cur_loc = ""
function change_on_load(){
    var loc = location.hash; // temp
    var loc_dst = document.links.hash;
    //document.getElementById('dbg').value = loc;
    var re = new RegExp("^#a_loc","g");
    loc = loc.replace(re, "s_loc");
    document.getElementById(loc).style.backgroundColor = "#FF0000";
    cur_loc = loc
    dump(document.getElementById(loc));
}
function change(loc){
    if(cur_loc != "") {
        document.getElementById(cur_loc).style.backgroundColor = "#FFFFFF";
    }
    document.getElementById(loc).style.backgroundColor = "#FF0000";
    cur_loc = loc
}

window.onload = change_on_load;

function clickListener (event) {
    var x = event.clientX;
    var y = event.clientY;
    var elm = document.elementFromPoint(x, y);
    var loc = elm.getAttribute("href");
    // get hash
    //window.alert(elm);
    var re = new RegExp("^.*#a_loc","g");
    loc = loc.replace(re, "s_loc");
    document.getElementById('dbg').value = "AAA: " + loc;
    change(loc);
    return true;
}

if (document.addEventListener) {
    document.addEventListener('mousedown', clickListener, false);
} else if (document.attachEvent) {
    document.attachEvent('mousedown', clickListener);
}
//-->
"""

g_html_file_dict = {}
g_info_file_dict = {}
g_file_cnt = 0
g_file_cnt_ref = 0
OUT_DIR = "html"
REF_DIR = "ref"
LOC_ANCHOR_PREFIX = "a_loc"
LOC_SPAN_PREFIX = "s_loc"
db = None
g_db_list = []
g_src_file_dict = {}

def path_regalizer(path):
    path = path.replace('/', '<slash>')
    return path

# get file name by USR
def get_info_file(usr):
    global g_info_file_dict
    if usr == None or usr == "":
        return None
    fn = None
    if g_info_file_dict.has_key(usr):
        fn = g_info_file_dict[usr]
    return fn

# decide file name and register to the dictionary
def add_info_file(usr):
    global g_info_file_dict
    global g_file_cnt_ref
    if usr == None or usr == "":
        return None
    # generate file name from usr
    fn = re.sub("^c:", "", usr)
    fn = re.sub("#", ".", fn)
    # shorten file name
    fn_len = len(fn)
    if fn_len > 128:
        fn = "_" + fn[fn_len-128:]
    fn = path_regalizer(fn)
    fn = "%s/%s.%d" % (REF_DIR, fn, g_file_cnt_ref)
    g_file_cnt_ref += 1
    g_info_file_dict[usr] = fn
    return fn

# register html files to be generated to the dictionary.
def add_html_file(path):
    global g_html_file_dict
    global g_file_cnt
    global OUT_DIR
    if path == None or path == "":
        return
    fn = ""
    bn = os.path.basename(path)
    if g_html_file_dict.has_key(path):
        cxxtags_util.my_exit(1, "ERROR: %s is already registered" % (path))
    else:
        fn = path_regalizer(bn)
        fn = "%s.%d" % (fn, g_file_cnt)
        g_file_cnt += 1
        g_html_file_dict[path] = fn

# get html file name by path.
def get_src_html_name(path):
    global g_html_file_dict
    global OUT_DIR
    fn = ""
    if not g_html_file_dict.has_key(path):
        cxxtags_util.my_exit(1, "ERROR: output file for %s is not found" % (path))
    else:
        fn = g_html_file_dict[path]
    return fn

# generate link html to a file
def gen_link_html(file_name, line, col):
    if not g_html_file_dict.has_key(file_name):
        cxxtags_util.my_exit(1, "ERROR: fopen: " + file_name)
    str = "<a href=\"../%s#a_loc_%d\">%s, %d, %d</a>\n" % (g_html_file_dict[file_name]+".html", line, file_name, line, col)
    return str

# return location to link by word information
def get_loc_to_link(db, file_name, word, line, col):
    global g_html_file_dict
    global OUT_DIR
    global LOC_ANCHOR_PREFIX
    global g_db_list
    #print "GET: %s, %d, %d, %s" %(word, line, col, file_name)
    # ref
    cur = db.cursor()
    cur.execute("SELECT ref_file_list.name, ref.ref_line FROM " + cxxtags_util.QUERY_JOINED_TABLE_REF + " WHERE file_list.name=? AND ref.name=? AND ref.line=? AND ref.col=? LIMIT 1", (file_name, word, line, col))
    for ref_row in cur.fetchall():
        ref_file_name, ref_line = ref_row
        if g_html_file_dict.has_key(ref_file_name):
            link = "%s#%s_%d" % (g_html_file_dict[ref_file_name]+".html", LOC_ANCHOR_PREFIX, ref_line)
            return link
    # decl
    cur.execute("SELECT decl.usr FROM " + cxxtags_util.QUERY_JOINED_TABLE_DECL + " WHERE file_list.name=? AND decl.name=? AND decl.line=? AND decl.col=? LIMIT 1", (file_name, word, line, col))
    for decl_row in cur.fetchall():
        decl_usr = decl_row[0]
        fn = get_info_file(decl_usr)
        if fn:
            fn += ".html"
            #print "DECL: %s, %d, %d, %s" %(word, line, col, html_fn)
            return fn
    return None

def replace_html_special_char(str):
    str = re.sub(r"<", "&lt", str)
    str = re.sub(r">", "&gt", str)
    return str

class FIN(Exception):
    pass

def proc_file(fn):
    global LOC_ANCHOR_PREFIX
    global LOC_SPAN_PREFIX
    global OUT_DIR
    fi = open(u"%s" % (fn), 'r')
    line_no = 1
    fo_name = OUT_DIR + "/" + get_src_html_name(fn)
    fo = open(u"%s.html" % (fo_name), 'w')
    #print "%s->%s" % (fn, fo_name)
    fo.write("<?xml version=\"1.0\" encoding=\"shift_jis\"?>\n")
    fo.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n")
    fo.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"ja\" lang=\"ja\">\n")
    fo.write("<script src=\"view.js\"></script>\n")
    fo.write("<link rel=\"stylesheet\" href=\"./style.css\">\n")
    fo.write("<head>\n")
    fo.write("</head>\n")
    fo.write("<body id=\"main_body\">\n")
    fo.write("<textarea style=\"display:none;\" value=\"\" id=\"dbg\"></textarea><br>\n")
    fo.write("<h3>%s</h3>\n"%(fn))
    fo.write("<pre>\n")
    is_in_comment = 0
    db = cxxtags_util.db_connect(g_src_file_dict[fn])
    for line in fi.readlines():
        line_len = len(line)
        idx = 0
        fo.write("<a name=\"%s_%d\" id=\"line_%d\"><span id=\"%s_%d\">%4d:</span> " % (LOC_ANCHOR_PREFIX, line_no, line_no, LOC_SPAN_PREFIX, line_no, line_no))
        #fo.write("%d:" % (line_no))
        while idx < line_len-1:
            val = ""
            try:
                if is_in_comment == 1:
                    # end of comment
                    m = re.search(".*\*/", line[idx:line_len-1])
                    if m:
                        val = m.group()
                        fo.write("<span class=\"cm\">%s</span>" % (val))
                        is_in_comment = 0
                        raise FIN
                    val = line[idx:line_len-1]
                    fo.write("<span class=\"cm\">%s</span>" % (val))
                    raise FIN
                # multi line comment
                m = re.search("^/\*", line[idx:line_len-1])
                if m:
                    val = m.group()
                    fo.write("<span class=\"cm\">%s</span>" % (val))
                    is_in_comment = 1
                    raise FIN
                # snip space
                m = re.search("^\s+", line[idx:line_len-1])
                if m:
                    val = m.group()
                    fo.write("<span>%s</span>" % (val))
                    raise FIN
                # one line comment
                m = re.search("^//.*$", line[idx:line_len-1])
                if m:
                    val = m.group()
                    fo.write("<span class=\"cm\">%s</span>" % (val))
                    raise FIN
                # find num
                m = re.search("^0x[0-9a-fA-F]+", line[idx:line_len-1])
                if m:
                    val = m.group()
                    fo.write("<span>%s</span>" % (val))
                    raise FIN
                # find num
                m = re.search("^0[0-7]+", line[idx:line_len-1])
                if m:
                    val = m.group()
                    fo.write("<span>%s</span>" % (val))
                    raise FIN
                # find num
                m = re.search("^[0-9]+", line[idx:line_len-1])
                if m:
                    val = m.group()
                    fo.write("<span>%s</span>" % (val))
                    raise FIN
                # find word
                m = re.search("^[~]?[a-zA-Z_][a-zA-Z0-9_]*", line[idx:line_len-1])
                if m:
                    val = m.group()
                    if val in KEYWORDS:
                        fo.write("<span class=\"kw\">%s</span>" % (val))
                    else:
                        link = get_loc_to_link(db, fn, val, line_no, idx+1)
                        if link:
                            fo.write("<a href=\"%s\">%s</a>" % (link, val))
                        else:
                            fo.write("%s" % (val))
                    raise FIN
                # find string
                m = re.search("^\"[^\"]+\"", line[idx:line_len-1])
                if m:
                    val = m.group()
                    fo.write("<font color=\"red\">%s</font>" % (val))
                    raise FIN
                # find char
                m = re.search("^\'[^\']+\'", line[idx:line_len-1])
                if m:
                    val = m.group()
                    fo.write("<font color=\"red\">%s</font>" % (val))
                    raise FIN
                # find define directive
                m = re.search("^#\s*define", line[idx:line_len-1])
                if m:
                    val = m.group()
                    val = replace_html_special_char(val)
                    fo.write("<span class=\"pp\">%s</span>" % (val))
                    raise FIN
                # find include directive
                m = re.search("^#\s*include.+$", line[idx:line_len-1])
                if m:
                    val = m.group()
                    val = replace_html_special_char(val)
                    fo.write("<span class=\"pp\">%s</span>" % (val))
                    raise FIN
                # find special chars
                m = re.search("^[{}!%&\(\)=~^|+-/\*<>:;]", line[idx:line_len-1])
                if m:
                    val = m.group()
                    fo.write("<span class=\"spc\">%s</span>" % (val))
                    raise FIN
                # other
                m = re.search("^.", line[idx:line_len-1])
                if m:
                    val = m.group()
                    fo.write("<span>%s</span>" % (val))
                    raise FIN
            except FIN:
                idx += len(val)
        line_no += 1
        fo.write("</a>\n")
    db.close()
    fi.close()
    fo.close()

# generate text files that reference informations are listed
def gen_ref_info_txt():
    global OUT_DIR
    global g_db_list
    done_dict = {}
    for db_fn in g_db_list:
        print "gen_ref: " + db_fn
        db = cxxtags_util.db_connect(db_fn)
        cur = db.cursor()
        columns = "ref.usr, ref.line, ref.col, file_list.name"
        cur.execute("SELECT " + columns + " FROM " + cxxtags_util.QUERY_JOINED_TABLE_REF + ";")
        for i in cur.fetchall():
            # get values from a query result
            ref_usr, line, col, file_name = i
            # add to reference list
            if ref_usr != "" and file_name != "":
                ref_info_str = ref_usr+TXT_DELIM+file_name+TXT_DELIM+str(line)+TXT_DELIM+str(col)+TXT_DELIM
                # check if it's already processed
                if done_dict.has_key(ref_info_str):
                    continue
                done_dict[ref_info_str] = 1

                fn = get_info_file(ref_usr)
                if fn == None:
                    fn = add_info_file(ref_usr)
                if fn == None:
                    cxxtags_util.my_exit(1, "ERROR: REF_FILE: " + ref_usr)
                fo_txt = open("%s/%s.txt"%(OUT_DIR, fn), 'a+')
                str_line = cxxtags_util.get_line_from_file(file_name, line)
                fo_txt.write("refered: "+ref_info_str+str_line+"\n")
                fo_txt.close()
        db.close()

# generate text files that declaration informations are listed
def gen_decl_info_txt():
    global OUT_DIR
    global g_db_list
    done_dict = {}
    for db_fn in g_db_list:
        print "gen_decl: " + db_fn
        db = cxxtags_util.db_connect(db_fn)
        cur = db.cursor()
        cur.execute("SELECT decl.usr, decl.line, decl.col, file_list.name, decl.is_def FROM " + cxxtags_util.QUERY_JOINED_TABLE_DECL + ";")
        for i in cur.fetchall():
            # get values from a query result
            usr, line, col, file_name, is_def = i
            # add to reference list
            if usr != "" and file_name != "":
                decl_info_str = usr+TXT_DELIM+file_name+TXT_DELIM+str(line)+TXT_DELIM+str(col)+TXT_DELIM
                # check if it's already processed
                if done_dict.has_key(decl_info_str):
                    continue
                done_dict[decl_info_str] = 1

                fn = get_info_file(usr)
                if fn == None:
                    fn = add_info_file(usr)
                if fn == None:
                    cxxtags_util.my_exit(1, "ERROR: REF_FILE: " + usr)
                fo_txt = open("%s/%s.txt"%(OUT_DIR, fn), 'a+')
                str_line = cxxtags_util.get_line_from_file(file_name, line)
                if is_def == 1:
                    fo_txt.write("defined: ")
                else:
                    fo_txt.write("declared: ")
                fo_txt.write(decl_info_str+str_line+"\n")
                fo_txt.close()
        db.close()

# generate text files that override informations are listed
def gen_override_info_txt():
    global OUT_DIR
    global g_db_list
    done_dict = {}
    done_dict_override = {}
    for db_fn in g_db_list:
        print "gen_overriden: " + db_fn
        db = cxxtags_util.db_connect(db_fn)
        cur = db.cursor()
        cur.execute("SELECT overriden.usr, file_list.name, overriden.line, overriden.col, overriden.usr_overrider FROM " + cxxtags_util.QUERY_JOINED_TABLE_OVERRIDEN + ";")
        for row in cur.fetchall():
            # get values from a query result
            usr, file_name, line, col, usr_overrider = row
            fn = get_info_file(usr)
            ovr_info_str = usr+TXT_DELIM+file_name+TXT_DELIM+str(line)+TXT_DELIM+str(col)+TXT_DELIM+usr_overrider
            # check if it's already processed
            if done_dict.has_key(ovr_info_str):
                continue
            done_dict[ovr_info_str] = 1

            if fn == None:
                fn = add_info_file(usr)
            fo = open(OUT_DIR+"/"+fn+".txt", "a")
            fo.write("overriden: "+ovr_info_str+"\n")
            fo.close()
            cur.execute("SELECT file_list.name, decl.line, decl.col FROM " + cxxtags_util.QUERY_JOINED_TABLE_DECL + " WHERE decl.usr=? ORDER BY decl.is_def LIMIT 1;", (usr,))
            row = cur.fetchone()
            if row:
                file_name, line, col = row
                line_str = usr_overrider+TXT_DELIM+file_name+TXT_DELIM+str(line)+TXT_DELIM+str(col)+TXT_DELIM+usr
                if not done_dict_override.has_key(line_str):
                    done_dict_override[line_str] = 1
                    fn = get_info_file(usr_overrider)
                    if fn == None:
                        fn = add_info_file(usr_overrider)
                    fo = open(OUT_DIR+"/"+fn+".txt", "a")
                    fo.write("override: "+usr_overrider+TXT_DELIM+file_name+TXT_DELIM+str(line)+TXT_DELIM+str(col)+TXT_DELIM+usr+"\n")
                    fo.close()
        db.close()

# print table data for "declared", "defined" and "refered" information.
def print_info_table_data(fo_html, name, info_list):
    td_format = "<td aligh=\"left\">%s</td><td><pre>    </pre></td><td>%s</td>\n"
    fo_html.write("<h3>" + name + "</h3>\n")
    fo_html.write("<table class=\"loc\">\n")
    for i in info_list:
        col_list = i.split(TXT_DELIM)
        col_usr, col_file_name, col_line, col_col = col_list[:4]
        col_str = string.join(col_list[4:],"")
        fo_html.write("<tr>\n")
        fo_html.write(td_format % (gen_link_html(col_file_name, int(col_line), int(col_col)), col_str))
        fo_html.write("</tr>\n")
    fo_html.write("</table>\n")

# generate formatted html file from txt file
def gen_info_html():
    global OUT_DIR
    global g_db_list
    done_check = {}
    for db_fn in g_db_list:
        print "gen_info_html: " + db_fn
        db = cxxtags_util.db_connect(db_fn)
        cur = db.cursor()
        cur.execute("SELECT decl.usr, decl.line, file_list.name, decl.name FROM " + cxxtags_util.QUERY_JOINED_TABLE_DECL + ";")
        #for i in  g_html_file_dict.keys():
        for i in cur.fetchall():
            ref_usr, line, file_name, name = i
            # add to reference list
            if ref_usr != "" and file_name != "":
                if done_check.has_key(ref_usr):
                    continue
                fn = get_info_file(ref_usr)
                if fn == None:
                    continue
                ref_list = []
                override_list = []
                overriden_list = []
                declared_list = []
                defined_list = []

                txt_name = "%s/%s.txt"%(OUT_DIR, fn)
                if os.path.exists(txt_name):
                    fi_txt = open("%s/%s.txt"%(OUT_DIR, fn), 'r')
                    for line in fi_txt.readlines():
                        m = re.search("^refered: (.*)$", line)
                        if m:
                            ref_list.append(m.group(1))
                        m = re.search("^override: (.*)$", line)
                        if m:
                            override_list.append(m.group(1))
                        m = re.search("^overriden: (.*)$", line)
                        if m:
                            overriden_list.append(m.group(1))
                        m = re.search("^declared: (.*)$", line)
                        if m:
                            declared_list.append(m.group(1))
                        m = re.search("^defined: (.*)$", line)
                        if m:
                            defined_list.append(m.group(1))

                fo_html = open("%s/%s.html"%(OUT_DIR, fn), 'w')
                fo_html.write("<link rel=\"stylesheet\" href=\"../style.css\">\n")
                fo_html.write("<body>\n")
                fo_html.write("<h1>%s</h1>\n"%(name))
                #fo_html.write("<a href=\"../%s.txt\">../%s.txt</a><BR>\n"%(fn, fn))
                fo_html.write("<h3>USR</h3>\n")
                fo_html.write("%s<BR>\n"%(ref_usr))
                td_format = "<td aligh=\"left\">%s</td><td><pre>    </pre></td><td>%s</td>\n"
                # declared
                if len(declared_list) != 0:
                    print_info_table_data(fo_html, "declared", declared_list)
                # defined
                if len(defined_list) != 0:
                    print_info_table_data(fo_html, "defined", defined_list)
                # refered
                if len(ref_list) != 0:
                    print_info_table_data(fo_html, "refered", ref_list)
                if len(override_list) != 0:
                    fo_html.write("<h3>oveerride</h3>")
                    for i in override_list:
                        col_list = i.split(TXT_DELIM)
                        col_usr_overrider, col_file_name, col_line, col_col, col_usr = col_list
                        fo_html.write("%s %s<BR>"%(gen_link_html(col_file_name, int(col_line), int(col_col)), col_usr))
                if len(overriden_list) != 0:
                    fo_html.write("<h3>oveerriden</h3>")
                    for i in overriden_list:
                        col_list = i.split(TXT_DELIM)
                        col_usr, col_file_name, col_line, col_col, col_usr_overrider = col_list
                        fo_html.write("%s %s<BR>"%(gen_link_html(col_file_name, int(col_line), int(col_col)), col_usr_overrider))
                fo_html.write("</body>\n")
                fo_html.close()
                done_check[ref_usr] = 1
        db.close()

def gen_js():
    global OUT_DIR
    global JS_FILE_NAME
    fo = open("%s/%s"%(OUT_DIR, JS_FILE_NAME), 'w')
    fo.write(JS_SRC)
    fo.close()

def gen_css():
    global OUT_DIR
    fo = open(OUT_DIR + "/" + "style.css", "w")
    fo.write("body { font-family: monospace; }\n")
    fo.write(
"""
span.kw {
    color: darkblue;
    font-weight: bold; 
    }
span.spc { 
    color: gray;
    }
span.cm { 
    color: green;
    }
span.pp { 
    color: maroon;
    }
"""
)
    #fo.write("table.loc td { font-family: monospace }\n")
    fo.close()

### main ###
def main():
    global g_db_list
    global g_src_file_dict
    db_in_dir  = sys.argv[1]

    # make output dir
    if os.path.exists(OUT_DIR):
        shutil.rmtree(OUT_DIR)
    os.mkdir(OUT_DIR)
    os.mkdir("%s/%s" % (OUT_DIR, REF_DIR))

    # build file list from file index
    db_idx = cxxtags_util.db_connect(db_in_dir + "/" + FILE_INDEX_DB_NAME)
    cur = db_idx.cursor()
    cur.execute("SELECT file_name, db_file FROM file_index")
    added_db_dict = {}
    for row in cur.fetchall():
        fn = row[0]
        db_fn = db_in_dir + "/" + row[1]
        if not added_db_dict.has_key(db_fn):
            #new_loc = make_index_db(db_fn)
            added_db_dict[db_fn] = db_fn
            g_db_list.append(db_fn)
        if not g_src_file_dict.has_key(fn):
            g_src_file_dict[fn] = db_fn
            # decide file name
            add_html_file(fn)
    db_idx.close()

    gen_css()
    gen_js()
    # ref
    st = time.time()
    gen_ref_info_txt()
    #print "    GEN_REF = " + fpformat.fix(time.time()-st,3)
    # decl
    st = time.time()
    gen_decl_info_txt()
    #print "    GEN_DECL = " + fpformat.fix(time.time()-st,3)
    # overriden
    st = time.time()
    gen_override_info_txt()
    #print "    GEN_OVERRIDEN = " + fpformat.fix(time.time()-st,3)
    # info html
    st = time.time()
    gen_info_html()
    #print "    GEN_INFO_HTML = " + fpformat.fix(time.time()-st,3)

    for f in g_src_file_dict.keys():
        print "%s" % (f)
        proc_file(f)
# run script
main()
