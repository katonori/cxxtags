#!/usr/bin/python
""" Usage: call with out.db in.db ...
"""

import sys
import os
import tempfile
import sqlite3
import shutil

DB_VER = 4

db_in = None
db_out = None

def merge_ref_db(db_out, db_in_file):
    # concat DBs
    db_out.execute("ATTACH DATABASE '%s' AS src"%(db_in_file))
    db_out.execute("INSERT INTO main.ref(usr, name, file_name, line, col, kind, ref_file_name, ref_line, ref_col) SELECT usr, name, file_name, line, col, kind, ref_file_name, ref_line, ref_col from src.ref")
    db_out.execute("DETACH DATABASE src")
    # remove duplicated rows.
    db_out.execute("CREATE TABLE tmp_table AS SELECT * FROM main.ref GROUP BY usr, name, file_name, line, col, kind, ref_file_name, ref_line, ref_col")
    db_out.execute("DROP TABLE ref");
    db_out.execute("ALTER TABLE tmp_table RENAME TO ref");

def merge_decl_db(db_out, db_in_file):
    # concat DBs
    db_out.execute("ATTACH DATABASE '%s' AS src"%(db_in_file))
    db_out.execute("INSERT INTO main.decl(usr, name, file_name, line, col, kind, val, is_virtual, is_def) SELECT usr, name, file_name, line, col, kind, val, is_virtual, is_def from src.decl")
    db_out.execute("DETACH DATABASE src")
    # remove duplicated rows.
    db_out.execute("CREATE TABLE tmp_table AS SELECT * FROM main.decl GROUP BY usr, name, file_name, line, col, kind, val, is_virtual, is_def")
    db_out.execute("DROP TABLE decl");
    db_out.execute("ALTER TABLE tmp_table RENAME TO decl");

def merge_overriden_db(db_out, db_in_file):
    # concat DBs
    db_out.execute("ATTACH DATABASE '%s' AS src"%(db_in_file))
    db_out.execute("INSERT INTO main.overriden(usr, name, file_name, line, col, kind, usr_overrider, is_def) SELECT usr, name, file_name, line, col, kind, usr_overrider, is_def from src.overriden")
    db_out.execute("DETACH DATABASE src")
    # remove duplicated rows.
    db_out.execute("CREATE TABLE tmp_table AS SELECT * FROM main.overriden GROUP BY usr, name, file_name, line, col, kind, usr_overrider, is_def")
    db_out.execute("DROP TABLE overriden");
    db_out.execute("ALTER TABLE tmp_table RENAME TO overriden");

def get_db_ver(db):
    # get input db
    q = "SELECT db_format FROM db_info"
    db.execute(q)
    res = db.execute(q).fetchall()
    if len(res) != 1:
        return None
    return res[0][0]

fo = tempfile.NamedTemporaryFile()
#print "tmp: " , fo.name
db_out = sqlite3.connect(fo.name)

db_out.execute(
        u"""
        CREATE TABLE db_info(
            db_format INTEGER
            );
        """
     )
db_out.execute(
        u"""
        CREATE TABLE ref(
            usr TEXT,
            name TEXT,
            file_name TEXT,
            line INTEGER,
            col INTEGER,
            kind TEXT,
            ref_file_name TEXT,
            ref_line INTEGER,
            ref_col INTEGER
            );
        """
     )
db_out.execute(
        u"""
        CREATE TABLE decl(
            usr TEXT,
            name TEXT,
            file_name TEXT,
            line INTEGER,
            col INTEGER,
            kind TEXT,
            val INTEGER,
            is_virtual INTEGER,
            is_def INTEGER);
        """
     )
db_out.execute(
        u"""
        CREATE TABLE overriden(
            usr TEXT,
            name TEXT,
            file_name TEXT,
            line INTEGER,
            col INTEGER,
            kind TEXT,
            usr_overrider TEXT,
            is_def INTEGER
            );
        """
     )
db_out.execute("INSERT INTO db_info VALUES(%d);" % (DB_VER))

end = len(sys.argv)
for i in sys.argv[2:end]:
    print "merging tags: ", i
    db_in = sqlite3.connect(i)
    db_ver = get_db_ver(db_in)
    db_in.close()
    if db_ver == None or db_ver != DB_VER:
        print "ERROR: db format mismatch: " + str(db_ver) + " vs. " + str(DB_VER)
        exit(1)
    merge_ref_db(db_out, i)
    merge_decl_db(db_out, i)
    merge_overriden_db(db_out, i)
    db_out.commit()

db_out.close()
fo.flush()
shutil.copy(fo.name, sys.argv[1])
fo.close()
