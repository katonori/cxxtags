#!/usr/bin/python
USAGE = 'usage: cmd decl/def/ref/name database_dir name [-f file_name] [-l line_no] [-c column_no]'

import sys
import sqlite3
import cxxtags_util
import getopt
import re
import os

OUTPUT_DELIMITER = '|'

gDebugMode = 0
gPartialCompare = 0

class HandlerBase:
    """ Base class of *Handler classes """

    mAllDbFileList = None
    mDbDir = ""
    mUsrDb = None

    def GetAllDbFiles(self):
        if self.mAllDbFileList == None:
            self.mAllDbFileList = cxxtags_util.get_db_file_list(self.mDbDir)
        return self.mAllDbFileList

    def GetUsrFromRefTable(self, db, name, fileName, lineNo, colNo):
        cur = db.cursor()
        q = 'SELECT usr_list.name, file_list.name, ref.line, ref.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_REF + ' WHERE name_list.name=?'
        argList = (name,)
        if fileName != "":
            q += ' AND file_list.name LIKE ?'
            argList += ('%'+fileName,)
        if lineNo != -1:
            q += ' AND ref.line=?'
            argList += (lineNo,)
        if colNo != -1:
            q += ' AND ref.col=?'
            argList += (colNo,)
        cur.execute(q, argList)
        result = cur.fetchall()
        usr = ""
        for row in result:
            resUsr, resFileName, resLine, resCol = row
            if fileName == "" or re.search(fileName + '$', resFileName):
                if usr == "":
                    usr = resUsr
                elif usr != resUsr:
                    print usr + ", " + resUsr
                    print "ERROR: Ambiguous query."
                    for row in result:
                        print row
                    return ""
        return usr

    def GetUsrFromDeclTable(self, db, name, fileName, lineNo, colNo):
        cur = db.cursor()
        q = 'SELECT usr_list.name, file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE name_list.name=?'
        argList = (name,)
        if fileName != "":
            q += ' AND file_list.name LIKE ?'
            argList += ('%'+fileName,)
        if lineNo != -1:
            q += ' AND decl.line=?'
            argList += (lineNo,)
        if colNo != -1:
            q += ' AND decl.col=?'
            argList += (colNo,)
        cur.execute(q, argList)
        result = cur.fetchall()
        usr = ""
        for row in result:
            resUsr, resFileName, resLine, resCol = row
            if fileName == "" or re.search(fileName + '$', resFileName):
                if usr == "":
                    usr = resUsr
                elif usr != resUsr:
                    print usr + ", " + resUsr
                    print "ERROR: Ambiguous query."
                    for row in result:
                        print row
                    return ""
        return usr

    def GetUsr(self, name, fileName, lineNo, colNo):
        if fileName == "":
            print "ERROR: specify file name"
            sys.exit(1)
        db_list = cxxtags_util.get_db_files_by_src_file_name(self.mDbDir, fileName)
        if db_list == []:
            print "ERROR: database file of \'%s\' not found:"%(fileName)
            sys.exit(1)
        # if multiple hit occur even though absolute path is specified,
        # choose the file found the first.
        if fileName[0] != '/':
            if len(db_list) != 1 and fileName.find('/') != 0:
                print "ERROR: file name is ambiguous. candidates are:"
                for i in db_list:
                    print i
                sys.exit(1)
        fn = db_list[0]
        db = cxxtags_util.db_connect(fn)
        usr = self.GetUsrFromDeclTable(db, name, fileName, lineNo, colNo)
        if usr == "":
            usr = self.GetUsrFromRefTable(db, name, fileName, lineNo, colNo)
        if usr != "":
            self.mUsrDb = db
            return usr
        return None


class QueryHandlerDecl(HandlerBase):
    """ Handle Rquest for infomation about declarations """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, name, fileName, lineNo, colNo):
        usr = self.GetUsr(name, fileName, lineNo, colNo)
        if usr:
            result = self.QueryDeclInfo(usr)
            if result:
                resultName, resultLine, resultCol = result
                print resultName + OUTPUT_DELIMITER + str(resultLine) + OUTPUT_DELIMITER + str(resultCol)
            self.mUsrDb.close()

    def QueryDeclInfo(self, usr):
        cur = self.mUsrDb.cursor()
        cur.execute('SELECT file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE usr_list.name=? ORDER BY decl.is_def LIMIT 1', (usr,))
        result = cur.fetchone()
        return result

class QueryHandlerDef(HandlerBase):
    """ Handle Rquest for infomation about definition """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, name, fileName, lineNo, colNo):
        usr = self.GetUsr(name, fileName, lineNo, colNo)
        if usr:
            result = self.GetDef(usr)
            if result:
                resultName, resultLine, resultCol = result
                print resultName + OUTPUT_DELIMITER + str(resultLine) + OUTPUT_DELIMITER + str(resultCol)

    def GetDef(self, usr):
        for fn in self.GetAllDbFiles():
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            cur.execute('SELECT file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE usr_list.name=? AND is_def=1 LIMIT 1;', (usr,))
            result = cur.fetchone()
            db.close()
            if result:
                return result
        return None

class QueryHandlerRef(HandlerBase):
    """ Handle Rquest for infomation about reference """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, name, fileName, lineNo, colNo):
        usr = self.GetUsr(name, fileName, lineNo, colNo)
        if usr:
            self.GetAllRefs(usr)

    def GetAllRefs(self, usr):
        resultList = []
        for fn in self.GetAllDbFiles():
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            cur.execute('SELECT usr_list.id FROM usr_list WHERE name=?;', (usr,))
            row = cur.fetchone()
            if row:
                usrId = row[0]
                cur.execute('SELECT file_list.name, ref.line, ref.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_FILELIST_REF + ' WHERE ref.usr_id=?;', (usrId,))
                resultList += cur.fetchall()
            db.close()
        resultList = set(resultList)
        for i in resultList:
            resultName, resultLine, resultCol = i
            print resultName + OUTPUT_DELIMITER + str(resultLine) + OUTPUT_DELIMITER + str(resultCol)

class QueryHandlerName(HandlerBase):
    """ Handle Rquest for infomation about name """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, name, fileName, lineNo, colNo):
        global gDebugMode
        resultList = []
        dbList = cxxtags_util.get_db_files_by_src_file_name(self.mDbDir, fileName)
        if dbList == []:
            dbList = self.GetAllDbFiles()
        for fn in dbList:
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            #cur.execute('SELECT file_list.name, name_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE name_list.name LIKE ?;', ('%'+name+'%',))
            #cur.execute('SELECT name_list.name, name_list.id FROM name_list WHERE name_list.name LIKE ?;', ('%'+name+'%',))
            if gPartialCompare == 1:
                cur.execute('SELECT name_list.name, name_list.id FROM name_list WHERE name_list.name LIKE ?;', ('%'+name+'%',))
            else:
                cur.execute('SELECT name_list.name, name_list.id FROM name_list WHERE name_list.name=?;', (name,))
            result = cur.fetchall()
            for idRow in result:
                resultName, resultId = idRow
                if -1 != resultName.find(name): # exclude case mismatching
                    if gDebugMode != 0:
                        cur.execute('SELECT file_list.name, decl.line, decl.col, usr_list.name FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE decl.name_id=?;', (resultId, ))
                    else:
                        cur.execute('SELECT file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_FILELIST_DECL + ' WHERE decl.name_id=?;', (resultId, ))
                    rows = cur.fetchall()
                    for i in rows:
                        print resultName + ",", i
                    resultList += rows
            db.close()

def main():
    global USAGE
    global gDebugMode
    global gPartialCompare
    try:
        optlist, args = getopt.gnu_getopt(sys.argv[1:], 'f:l:c:dp', ['debug', 'partial'])
    except getopt.GetoptError, e:
        print "ERROR: getopt: ", e.args[0]
        sys.exit(1)
    if len(args) != 3:
        print USAGE
        sys.exit(0)
    queryType = args[0]
    dbDir = args[1]
    name = args[2]
    fileName = ""
    lineNo = -1
    colNo = -1
    for opt, val in optlist:
        if opt == "-f":
            fileName = val
        elif opt == "-l":
            lineNo = val
        elif opt == "-c":
            colNo = val
        elif opt in ("-d", "--debug"):
            gDebugMode = 1
        elif opt in ("-p", "--partial"):
            gPartialCompare = 1

    result = []
    if queryType == 'ref': # get all references
        refHandler = QueryHandlerRef(dbDir)
        refHandler.DoQuery(name, fileName, lineNo, colNo)
    elif queryType == 'decl': # get a declaration or definition
        declHandler = QueryHandlerDecl(dbDir)
        declHandler.DoQuery(name, fileName, lineNo, colNo)
    elif queryType == 'def': # get a definition
        defHandler = QueryHandlerDef(dbDir)
        defHandler.DoQuery(name, fileName, lineNo, colNo)
    elif queryType == 'name': # search a name
        nameHandler = QueryHandlerName(dbDir)
        nameHandler.DoQuery(name, fileName, lineNo, colNo)
    else:
        print "ERROR: query type must be ref, decl, def or name"
        sys.exit(1)

#######
main()
