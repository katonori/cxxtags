#!/usr/bin/python
USAGE = 'usage: cmd database_dir name decl/def/ref [-f file_name] [-l line_no] [-c column_no]'

import sys
import sqlite3
import cxxtags_util
import getopt
import re
import os

class HandlerBase:
    """ Base class of *Handler classes """

    mDb = None
    mDbFileList = []
    def GetUsrFromRefTable(self, name, fileName, lineNo, colNo):
        cur = self.mDb.cursor()
        q = 'SELECT ref.usr, file_list.name FROM '+ cxxtags_util.QUERY_JOINED_TABLE_REF + ' WHERE ref.name=?'
        argList = (name,)
        if fileName != "":
            q += ' AND file_list.name LIKE ?'
            argList += ('%'+fileName,)
        if lineNo != -1:
            q += ' AND ref.line=?'
            argList += (lineNo,)
        if colNo != -1:
            q += ' AND ref.col=?'
            argList += (colNo,)
        q += ' LIMIT 2;'
        cur.execute(q, argList)
        res = cur.fetchall()
        if len(res) > 1:
            print "ERROR: Ambiguous query."
            for row in res:
                print row
            sys.exit(1)
        for row in res:
            resUsr, resFileName = row
            if fileName == "" or re.search(fileName + '$', resFileName):
                return resUsr
        return None

    def GetUsrFromDeclTable(self, name, fileName, lineNo, colNo):
        cur = self.mDb.cursor()
        q = 'SELECT decl.usr, file_list.name FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE decl.name=?'
        argList = (name,)
        if fileName != "":
            q += ' AND file_list.name LIKE ?'
            argList += ('%'+fileName,)
        if lineNo != -1:
            q += ' AND decl.line=?'
            argList += (lineNo,)
        if colNo != -1:
            q += ' AND decl.col=?'
            argList += (colNo,)
        q += ' LIMIT 2;'
        cur.execute(q, argList)
        res = cur.fetchall()
        if len(res) > 1:
            print "ERROR: Ambiguous query."
            for row in res:
                print row
            sys.exit(1)
        for row in res:
            resUsr, resFileName = row
            if fileName == "" or re.search(fileName + '$', resFileName):
                return resUsr
        return None

class QueryHandlerDecl(HandlerBase):
    """ Handle Rquest for infomation about declarations """

    def DoQuery(self, dbDir, name, fileName, lineNo, colNo):
        self.mDbFileList = cxxtags_util.get_db_file_list(dbDir)
        for fn in self.mDbFileList:
            self.mDb = cxxtags_util.db_connect(fn)
            usr = self.GetUsrFromRefTable(name, fileName, lineNo, colNo)
            if not usr:
                usr = self.GetUsrFromDeclTable(name, fileName, lineNo, colNo)
            if usr:
                declFileName, line, col = self.QueryDeclInfo(usr)
                print "%s\n%s\n%d\n"%(usr, declFileName, line), cxxtags_util.get_line_from_file(declFileName, line)
                self.mDb.close()
                break;
            self.mDb.close()

    def QueryDeclInfo(self, usr):
        cur = self.mDb.cursor()
        cur.execute('SELECT file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE decl.usr=? ORDER BY decl.is_def LIMIT 1', (usr,))
        res = cur.fetchone()
        return res

class QueryHandlerDef(HandlerBase):
    """ Handle Rquest for infomation about definition """

    def DoQuery(self, dbDir, name, fileName, lineNo, colNo):
        self.mDbFileList = cxxtags_util.get_db_file_list(dbDir)
        usr = ""
        for fn in self.mDbFileList:
            self.mDb = cxxtags_util.db_connect(fn)
            usr = self.GetUsrFromDeclTable(name, fileName, lineNo, colNo)
            if not usr:
                usr = self.GetUsrFromRefTable(name, fileName, lineNo, colNo)
            self.mDb.close()
            if usr:
                break;
        res = self.GetDef(usr)
        if res:
            print res

    def GetDef(self, usr):
        res_list = []
        for fn in self.mDbFileList:
            self.mDb = cxxtags_util.db_connect(fn)
            cur = self.mDb.cursor()
            cur.execute('SELECT file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE decl.usr=? AND is_def=1 LIMIT 1;', (usr,))
            res = cur.fetchone()
            self.mDb.close()
            if res:
                return res
        return None

class QueryHandlerRef(HandlerBase):
    """ Handle Rquest for infomation about reference """

    def DoQuery(self, dbDir, name, fileName, lineNo, colNo):
        self.mDbFileList = cxxtags_util.get_db_file_list(dbDir)
        usr = ""
        for fn in self.mDbFileList:
            self.mDb = cxxtags_util.db_connect(fn)
            usr = self.GetUsrFromDeclTable(name, fileName, lineNo, colNo)
            if not usr:
                usr = self.GetUsrFromRefTable(name, fileName, lineNo, colNo)
            self.mDb.close()
            if usr:
                break;
        res_list = self.GetAllRefs(usr)
        for i in res_list:
            print i

    def GetAllRefs(self, usr):
        res_list = []
        for fn in self.mDbFileList:
            self.mDb = cxxtags_util.db_connect(fn)
            cur = self.mDb.cursor()
            cur.execute('SELECT file_list.name, ref.line, ref.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_REF + ' WHERE ref.usr=?;', (usr,))
            res = cur.fetchall()
            for i in res:
                res_list.append(i)
            self.mDb.close()
        return res_list

def main():
    global USAGE
    try:
        optlist, args = getopt.gnu_getopt(sys.argv[1:], 'f:l:c:')
    except getopt.GetoptError, e:
        print "ERROR: getopt: ", e.args[0]
        sys.exit(1)
    if len(args) != 3:
        print USAGE
        sys.exit(0)
    dbDir = args[0]
    name = args[1]
    queryType = args[2]
    if queryType != 'ref' and queryType != 'decl' and queryType != 'def':
        print "ERROR: query type must be ref, decl or def"
        sys.exit(1)
    fileName = ""
    lineNo = -1
    colNo = -1
    for opt, val in optlist:
        if opt == "-f":
            fileName = val
        elif opt == "-l":
            lineNo = val
        elif opt == "-c":
            colNo = val

    if queryType == 'ref': # get all references
        refHandler = QueryHandlerRef()
        refHandler.DoQuery(dbDir, name, fileName, lineNo, colNo)
    elif queryType == 'decl': # get a declaration or definition
        declHandler = QueryHandlerDecl()
        declHandler.DoQuery(dbDir, name, fileName, lineNo, colNo)
    elif queryType == 'def': # get a definition
        defHandler = QueryHandlerDef()
        defHandler.DoQuery(dbDir, name, fileName, lineNo, colNo)
#######
main()
