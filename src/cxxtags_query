#!/usr/bin/python
def usage():
    print 'usage: cxxtags_query decl/def/ref database_dir file_name line_no column_no'
    print '     : cxxtags_query         name database_dir item_name [-f file_name] [-l line_no] [-c column_no]'
    print '     : cxxtags_query         dump database_dir table_name'

OUTPUT_DELIMITER = '|'
USE_BASE64 = 1
USE_USR2FILE_TABLE2 = False
USE_PLYVEL = False
DB_NUM = 1

import sys
if USE_PLYVEL:
    import plyvel
else:
    import leveldb
import getopt
import re
import os
import time
import commands
import inspect

TABLE_NAME_POSITION_TO_LOCAL_USR_ID = "A"
TABLE_NAME_USR_TO_GLOBAL_FILE_ID_REF = "B"
TABLE_NAME_USR_TO_GLOBAL_FILE_ID_OVERRIDER = "V"
TABLE_NAME_TOKEN_ID_TO_NAME = "C"
TABLE_NAME_LOCAL_USR_ID_TO_USR = "F"
TABLE_NAME_LOCAL_USR_ID_TO_DECL = "D"
TABLE_NAME_LOCAL_USR_ID_TO_DEF = "E"
TABLE_NAME_LOCAL_USR_ID_TO_REF = "L"
TABLE_NAME_LOCAL_USR_ID_TO_OVERRIDER = "M"
TABLE_NAME_CU_NAME_TO_ID = "H"
TABLE_NAME_CU_ID_TO_NAME = "I"
TABLE_NAME_LOCAL_USR_ID_TO_OVERRIDEE = "N"
TABLE_NAME_FILE_LIST = "O"
TABLE_NAME_BUILD_INFO = "Q"
TABLE_NAME_USR_TO_LOCAL_ID = "R"
TABLE_NAME_CUFILES = "S"
TABLE_NAME_USR_TO_GLOBAL_FILE_ID_DEF = "T"
TABLE_NAME_USR_TO_GLOBAL_FILE_ID_DEF2 = "U"

RV_ERROR = -1
RV_SUCCESS = 0
RV_NOT_FOUND = 1

gDebugMode = 0
gVerboseMode = 0
gPartialCompare = 0

SCRIPT_DIR = os.path.dirname(__file__)

ENCODING_TABLE = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                  'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                  'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                  'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                  'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                  'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                  'w', 'x', 'y', 'z', '0', '1', '2', '3',
                  '4', '5', '6', '7', '8', '9', '+', '/']
DECODING_TABLE = {'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7,
                  'I':8, 'J':9, 'K':10, 'L':11, 'M':12, 'N':13, 'O':14, 'P':15,
                  'Q':16, 'R':17, 'S':18, 'T':19, 'U':20, 'V':21, 'W':22, 'X':23,
                  'Y':24, 'Z':25, 'a':26, 'b':27, 'c':28, 'd':29, 'e':30, 'f':31,
                  'g':32, 'h':33, 'i':34, 'j':35, 'k':36, 'l':37, 'm':38, 'n':39,
                  'o':40, 'p':41, 'q':42, 'r':43, 's':44, 't':45, 'u':46, 'v':47,
                  'w':48, 'x':49, 'y':50, 'z':51, '0':52, '1':53, '2':54, '3':55,
                  '4':56, '5':57, '6':58, '7':59, '8':60, '9':61, '+':62, '/':63}

def genCConfig(filename):
    with open(filename, "w") as f:
        f.write('#define USE_BASE64 %d\n'%(USE_BASE64))
        f.write('#define DB_NUM %d\n'%(DB_NUM))
        f.write('#define TABLE_NAME_POSITION_TO_LOCAL_USR_ID "%s"\n'%(TABLE_NAME_POSITION_TO_LOCAL_USR_ID))
        f.write('#define TABLE_NAME_USR_TO_GLOBAL_FILE_ID_REF "%s"\n'%(TABLE_NAME_USR_TO_GLOBAL_FILE_ID_REF))
        f.write('#define TABLE_NAME_USR_TO_GLOBAL_FILE_ID_OVERRIDER "%s"\n'%(TABLE_NAME_USR_TO_GLOBAL_FILE_ID_OVERRIDER))
        f.write('#define TABLE_NAME_TOKEN_ID_TO_NAME "%s"\n'%(TABLE_NAME_TOKEN_ID_TO_NAME))
        f.write('#define TABLE_NAME_LOCAL_USR_ID_TO_DECL "%s"\n'%(TABLE_NAME_LOCAL_USR_ID_TO_DECL))
        f.write('#define TABLE_NAME_LOCAL_USR_ID_TO_DEF "%s"\n'%(TABLE_NAME_LOCAL_USR_ID_TO_DEF))
        f.write('#define TABLE_NAME_LOCAL_USR_ID_TO_USR "%s"\n'%(TABLE_NAME_LOCAL_USR_ID_TO_USR))
        f.write('#define TABLE_NAME_CU_NAME_TO_ID "%s"\n'%(TABLE_NAME_CU_NAME_TO_ID))
        f.write('#define TABLE_NAME_CU_ID_TO_NAME "%s"\n'%(TABLE_NAME_CU_ID_TO_NAME))
        f.write('#define TABLE_NAME_LOCAL_USR_ID_TO_REF "%s"\n'%(TABLE_NAME_LOCAL_USR_ID_TO_REF))
        f.write('#define TABLE_NAME_LOCAL_USR_ID_TO_OVERRIDER "%s"\n'%(TABLE_NAME_LOCAL_USR_ID_TO_OVERRIDER))
        f.write('#define TABLE_NAME_LOCAL_USR_ID_TO_OVERRIDEE "%s"\n'%(TABLE_NAME_LOCAL_USR_ID_TO_OVERRIDEE))
        f.write('#define TABLE_NAME_FILE_LIST "%s"\n'%(TABLE_NAME_FILE_LIST))
        f.write('#define TABLE_NAME_BUILD_INFO "%s"\n'%(TABLE_NAME_BUILD_INFO))
        f.write('#define TABLE_NAME_USR_TO_LOCAL_ID "%s"\n'%(TABLE_NAME_USR_TO_LOCAL_ID))
        f.write('#define TABLE_NAME_CUFILES "%s"\n'%(TABLE_NAME_CUFILES))
        f.write('#define TABLE_NAME_USR_TO_GLOBAL_FILE_ID_DEF "%s"\n'%(TABLE_NAME_USR_TO_GLOBAL_FILE_ID_DEF))
        f.write('#define TABLE_NAME_USR_TO_GLOBAL_FILE_ID_DEF2 "%s"\n'%(TABLE_NAME_USR_TO_GLOBAL_FILE_ID_DEF2))

def DEBUG_PRINT(str):
    global gVerboseMode
    if gVerboseMode != 0:
        funcName = inspect.currentframe().f_back.f_code.co_name
        print(funcName + ": " + str)

def id2usr(db, dbId, id):
    result = db.get(dbId + TABLE_NAME_LOCAL_USR_ID_TO_USR + "|%s"%(str(id)))
    return result

def usr2id(db, dbId, usr):
    result = db.get(dbId + TABLE_NAME_USR_TO_LOCAL_ID + "|%s"%(str(usr)))
    return result

def id2name(db, dbId, id):
    result = db.get(dbId + TABLE_NAME_TOKEN_ID_TO_NAME + "|%s"%(str(id)))
    return result

def getFilename(db, dbId):
    rv = db.get(dbId + TABLE_NAME_BUILD_INFO)
    if rv == None:
        return None
    cuFileName, filename, workDir, excludes, opt = rv.split("|")
    return filename

def GetResultString(db, dbId, nameId):
    name = id2name(db, dbId, nameId)
    if name == None:
        print("ERRRO: name lookup failed: " + str(nameId) + ": " + dbId)
        return None
    DEBUG_PRINT("name: " + str(nameId) + "," + str(name))
    fn = getFilename(db, dbId)
    if fn == None:
        print("ERRRO: file name lookup failed: " + dbId)
        return None
    DEBUG_PRINT("filename: " + str(fn))
    return name, fn

def GetLineFromFile(fn, line_no):
    line_no = int(line_no)
    fi = open(fn, 'r')
    all_lines = fi.readlines()
    str_line = ""
    if len(all_lines) < line_no:
        my_exit(1, "ERROR: GetLineFromFile: %s, %d\n"%(fn, line_no))
    else:
        str_line = all_lines[line_no-1]
    str_line = str_line.rstrip('\r\n')
    fi.close()
    return str_line

class Db:
    m_instance = None
    def __init__(self, dirname):
        if USE_PLYVEL:
            self.m_instance = plyvel.DB(dirname, bloom_filter_bits=10, lru_cache_size=(128<<20), create_if_missing=False)
        else:
            self.m_instance = leveldb.LevelDB(dirname, block_cache_size=(128<<20), create_if_missing=False)
    def get(self, key):
        try:
            if USE_PLYVEL:
                return self.m_instance.get(key)
            else:
                return self.m_instance.Get(key)
        except KeyError as e:
            return None
    def getItr(self):
        if USE_PLYVEL:
            return self.m_instance
        else:
            return self.m_instance.RangeIter()
    def close(self):
        if USE_PLYVEL:
            return self.m_instance.close()
        else:
            del self.m_instance
    def flushBatch(self, batch):
        self.m_instance.Write(batch, sync = True)

class DbBatch:
    m_batch = None
    m_db = None
    def __init__(self, db):
        if USE_PLYVEL:
            print("ERROR: rebuild by plyvel is not supported yet")
            assert False
        else:
            self.m_db = db
            self.m_batch = leveldb.WriteBatch()
    def delete(self, key):
        self.m_batch.Delete(key)
        
    def flush(self):
        self.m_db.flushBatch(self.m_batch)

class HandlerBase:
    #
    # Base class of *Handler classes
    #

    mDbDir = ""
    mFileListDb = None
    m_srcFileName = ""
    m_dbId = None
    m_lineNo = None
    m_colNo = None
    m_fileCount = None
    m_dbList = [None]*DB_NUM

    def __init__(self, dbDir):
        self.mUsrDbList = []
        self.mDbDir = dbDir + "/"
        self.mFileListDb = Db(dbDir + "/common")
        self.m_srcFileName = ""
        self.m_dbId = 0
        self.m_lineNo = 0
        self.m_colNo = 0
        self.m_dbList = [None]*DB_NUM
        count = self.mFileListDb.get("file_count")
        assert count != None
        self.m_fileCount = count

    def GetIdByFilename(self, filename):
        q = TABLE_NAME_FILE_LIST + "|" + filename
        rv = self.mFileListDb.get(q)
        if rv == None:
            return None
        return rv.split(",")

    def InitDbByFilename(self, filename):
        rv = self.GetIdByFilename(filename)
        if rv == None:
            return None
        cuId, dbId = rv
        self.m_dbId = dbId
        DEBUG_PRINT("InitDbByFilename: " + dbId)
        dbDirNo = self.GetDbDirNo()
        db = self.OpenDbById(dbId)
        self.m_dbList[dbDirNo] = db
        return db

    def InitUsrDb(self):
        dbList = os.listdir(self.mDbDir + "/usr_db")
        DEBUG_PRINT("usrDbList: " + str(dbList))
        for dir in dbList:
            if re.match("^[0-9a-f]+$", dir):
                db = Db(self.mDbDir + "/usr_db/" + dir)
                if db == None:
                    print("ERROR: db open: " + str(dir))
                    return None
                self.mUsrDbList.append(db)
        self.mUsrDbList = list(set(self.mUsrDbList))
        DEBUG_PRINT("usrDbList: " + str(self.mUsrDbList))
        return self.mUsrDbList

    def GetDbDirNo(self):
        return self.CalcDbDirNo(self.m_dbId)

    def CalcDbDirNo(self, dbId):
        return int(dbId, 16)%DB_NUM

    def GetDb(self, dbId):
        return self.m_dbList[int(dbId, 16)%DB_NUM]

    def GetMainDb(self):
        return self.m_dbList[int(self.m_dbId, 16)%DB_NUM]

    def OpenDbById(self, cuId):
        DEBUG_PRINT("OpenDbById: cuId: " + str(cuId))
        cmd = self.mDbDir + format(int(cuId, 16)%DB_NUM, 'x')
        DEBUG_PRINT("OpenDbById: " + cmd)
        timeS = time.time()
        db = Db(cmd)
        if db == None:
            print("ERROR:1: db_dir: "  + cuId)
            return None
        timeE = time.time()
        DEBUG_PRINT("OpenDbById: " + str((timeE-timeS)*1000.0) + " ms")
        return db

    def OpenAllDb(self):
        i = 0
        while i < DB_NUM:
            if self.m_dbList[i] == None:
                cmd = self.mDbDir + format(i, 'x')
                timeS = time.time()
                db = Db(cmd)
                if db == None:
                    print("ERROR:1: db_dir: "  + i)
                    return None
                timeE = time.time()
                DEBUG_PRINT("OpenAllDb: " + str((timeE-timeS)*1000.0) + " ms")
                self.m_dbList[i] = db
            i += 1
        return self.m_dbList

    def EncVal(self, val):
        str = ""
        val = int(val, 16)
        str = ENCODING_TABLE[val & 0x3f]
        val >>= 6;
        while val != 0:
            str += ENCODING_TABLE[val & 0x3f]
            val >>= 6;
        return str;

    def DecVal(self, valStr):
        result = 0
        base = 1
        for c in valStr:
            val = DECODING_TABLE[c]
            result += val*base
            base <<= 6
        result = hex(result).replace("0x", "")
        return result

    #
    # get USR from location information.
    #
    def GetUsrIdList(self, fileName, lineNo, colNo):
        if fileName == "":
            print "ERROR: specify file name"
            sys.exit(1)
        mainDb = self.GetMainDb()
        DEBUG_PRINT("file: " + fileName)
        q = self.m_dbId + TABLE_NAME_POSITION_TO_LOCAL_USR_ID + "|%s|%s"%(lineNo, colNo)
        DEBUG_PRINT("q: " + q)
        ans = mainDb.get(q)
        if ans == None:
            DEBUG_PRINT("pos2usr failed: " + q)
            return None
        usrList = ans.split(",")
        DEBUG_PRINT("usrIds: " + str(usrList))
        return usrList

    def GetDbIdListByDefUsr(self, usr):
        dbIdList = []
        if USE_USR2FILE_TABLE2:
            DEBUG_PRINT("usrDbList: " + str(self.mUsrDbList))
            for db in self.mUsrDbList:
                i = 0
                while i < int(self.m_fileCount, 16) + 1:
                    q = TABLE_NAME_USR2GLOBAL_FILE_ID2 + "|" + usr + "|" + format(i, 'x')
                    res = db.get(q)
                    if res:
                        dbIdList.append(format(i, 'x'))
                    i += 1
        else:
            for db in self.mUsrDbList:
                res = db.get(TABLE_NAME_USR_TO_GLOBAL_FILE_ID_DEF + "|" + usr)
                if res:
                    for fid in res.split(","):
                        dbIdList.append(fid)
        if dbIdList == []:
            dbIdList.append(self.m_dbId)
        return list(set(dbIdList))

    def GetDbIdListByOverriderUsr(self, usr):
        dbIdList = []
        for db in self.mUsrDbList:
            res = db.get(TABLE_NAME_USR_TO_GLOBAL_FILE_ID_OVERRIDER + "|" + usr)
            if res:
                for fid in res.split(","):
                    dbIdList.append(fid)
        return list(set(dbIdList))

    def GetDbIdListByRefUsr(self, usr):
        dbIdList = []
        if USE_USR2FILE_TABLE2:
            DEBUG_PRINT("usrDbList: " + str(self.mUsrDbList))
            for db in self.mUsrDbList:
                i = 0
                while i < int(self.m_fileCount, 16) + 1:
                    q = TABLE_NAME_USR2GLOBAL_FILE_ID2 + "|" + usr + "|" + format(i, 'x')
                    res = db.get(q)
                    if res:
                        dbIdList.append(format(i, 'x'))
                    i += 1
        else:
            for db in self.mUsrDbList:
                res = db.get(TABLE_NAME_USR_TO_GLOBAL_FILE_ID_REF + "|" + usr)
                DEBUG_PRINT("usrDb: " + str(res))
                if res:
                    for fid in res.split(","):
                        dbIdList.append(fid)
        return list(set(dbIdList))

    def GetDbByDbId(self, dbId):
        idx = int(dbId, 16)%DB_NUM
        db = self.m_dbList[idx]
        if db == None:
            db = self.OpenDbById(dbId)
            self.m_dbList[idx] = db
        return db

    def CloseDb(self):
        timeS = time.time()
        if self.mFileListDb:
            self.mFileListDb.close()
            self.mFileListDb = None
        timeE = time.time()
        DEBUG_PRINT("time: close: fileListDb: " + str(timeE - timeS))
        timeS = time.time()
        for db in self.mUsrDbList:
            db.close()
        self.mUsrDbList = []
        timeE = time.time()
        DEBUG_PRINT("time: close: usrDb: " + str(timeE - timeS))
        timeS = time.time()
        for db in self.m_dbList:
            if db:
                db.close()
        self.m_dbList = [None]*DB_NUM
        timeE = time.time()
        DEBUG_PRINT("time: close: dbList: " + str(timeE - timeS))

    def getToken(self, filename, line, col):
        # get token name from the file
        token = ""
        with open(filename, "r") as f:
            lines = f.readlines()
            l = lines[line-1][col-1:]
            m = re.search("^(~?[a-zA-Z0-9_]+)", l)
            if m:
                token = m.group(1)
        return token

    def PrintResult(self, name, fileName, line, col):
        if USE_BASE64 != 0:
            line = self.DecVal(line)
            col = self.DecVal(col)
        lineInt = int(line, 16)
        colInt = int(col, 16)
        # get token from filenam
        tokenName = self.getToken(fileName, lineInt, colInt)
        if name == tokenName:
            print str(name) + OUTPUT_DELIMITER + str(fileName) + OUTPUT_DELIMITER + str(lineInt) + OUTPUT_DELIMITER + str(colInt) + OUTPUT_DELIMITER + str(GetLineFromFile(fileName, lineInt))

    def ParseArg(self, argv):
        if len(argv) != 3:
            usage()
            sys.exit(1)
        fn, lineNo, colNo = argv
        self.m_srcFileName = os.path.abspath(fn)
        self.m_lineNo = format(int(lineNo), 'x')
        self.m_colNo = format(int(colNo), 'x')
        if USE_BASE64 != 0:
            self.m_lineNo = self.EncVal(self.m_lineNo)
            self.m_colNo = self.EncVal(self.m_colNo)
        # get token name from the file

class QueryHandlerDecl(HandlerBase):
    #
    # Handle Rquest for infomation about declarations
    #
    def DoQuery(self):
        self.InitUsrDb()
        if self.InitDbByFilename(self.m_srcFileName) == None:
            print "ERROR: cannot open database of '%s'"%(self.m_srcFileName)
            sys.exit(1)
        usrIds = self.GetUsrIdList(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        found = False
        if usrIds:
            for id in usrIds:
                if self.ProcOneUsr(id) == RV_SUCCESS:
                    found = True
        if found:
            return RV_SUCCESS
        else:
            return RV_NOT_FOUND

    def ProcOneUsr(self, usrId):
        DEBUG_PRINT("usrId: " + str(usrId))
        if usrId:
            result = self.QueryDeclInfo(usrId)
            if result:
                name, fileName, line, col = result
                self.PrintResult(name, fileName, line, col)
                return RV_SUCCESS
        # search def table in this compile unit
        return RV_NOT_FOUND

    def QueryDeclInfo(self, usrId):
        mainDb = self.GetMainDb()
        usr = id2usr(mainDb, self.m_dbId, usrId)
        rv = mainDb.get(self.m_dbId + TABLE_NAME_CUFILES)
        assert rv != None
        dbIdList = rv.split(",")[1:]
        DEBUG_PRINT("dbIdList: " + str(dbIdList))
        result = []
        DEBUG_PRINT("usr: " + usr)
        for dbId in dbIdList:
            db = self.GetDbByDbId(dbId)
            usrId = usr2id(db, dbId, usr)
            if usrId == None:
                continue
            DEBUG_PRINT("usrId: " + usrId)
            q = dbId + TABLE_NAME_LOCAL_USR_ID_TO_DECL + "|%s"%(usrId)
            DEBUG_PRINT("q: " + q)
            decl = db.get(q)
            DEBUG_PRINT("decl: " + str(decl))
            if decl:
                nameId, line, col = decl.split("|")
                name, fileName = GetResultString(db, dbId, nameId)
                if fileName != None and name != None:
                    return name, fileName, line, col
        return None

class QueryHandlerDef(HandlerBase):
    #
    # Handle Rquest for infomation about definition
    #
    m_isOnlyMainCompileUnit = False
    m_mainDb = None
    def DoQuery(self, isOnlyMainCompileUnit = False):
        self.m_isOnlyMainCompileUnit = isOnlyMainCompileUnit
        self.InitUsrDb()
        if self.InitDbByFilename(self.m_srcFileName) == None:
            print "ERROR: cannot open database of '%s'"%(self.m_srcFileName)
            sys.exit(1)
        usrIds = self.GetUsrIdList(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        found = False
        if usrIds:
            for id in usrIds:
                if self.ProcOneUsr(id) == RV_SUCCESS:
                    found = True
        if found:
            return RV_SUCCESS
        else:
            return RV_NOT_FOUND

    def ProcOneUsr(self, usrId):
        usr = id2usr(self.GetMainDb(), self.m_dbId, usrId)
        DEBUG_PRINT("usr: " + str(usr))
        if usr:
            result = self.GetDef(usr)
            for r in result:
                name, fileName, line, col = r
                self.PrintResult(name, fileName, line, col)

    def GetDef(self, usr):
        dbIdList = []
        if self.m_isOnlyMainCompileUnit == False:
            dbIdList = self.GetDbIdListByDefUsr(usr)
        else:
            rv = self.GetMainDb().get(self.m_dbId + TABLE_NAME_CUFILES)
            assert rv != None
            dbIdList = rv.split(",")[1:]
        DEBUG_PRINT("dbIdList: " + str(dbIdList))
        DEBUG_PRINT("m_dbList: " + str(self.m_dbList))
        result = []
        for dbId in dbIdList:
            db = self.GetDbByDbId(dbId)
            usrId = usr2id(db, dbId, usr)
            q = dbId + TABLE_NAME_LOCAL_USR_ID_TO_DEF + "|%s"%(usrId)
            DEBUG_PRINT("q: " + q)
            resDef = db.get(q)
            DEBUG_PRINT("def: " + str(resDef))
            if resDef:
                defList = resDef.split("|")
                nameId, line, col = tuple(defList)
                name, fileName = GetResultString(db, dbId, nameId)
                if fileName != None and name != None:
                    result.append((name, fileName, line, col))
        return result

class QueryHandlerRef(HandlerBase):
    #
    # Handle Rquest for infomation about reference
    #
    m_startTime = None
    def DoQuery(self):
        self.m_startTime = time.time()
        self.InitUsrDb()
        if self.InitDbByFilename(self.m_srcFileName) == None:
            print "ERROR: cannot open database of '%s'"%(self.m_srcFileName)
            sys.exit(1)
        usrIds = self.GetUsrIdList(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        found = False
        if usrIds:
            for id in usrIds:
                if self.ProcOneUsr(id) == RV_SUCCESS:
                    found = True
        if found:
            return RV_SUCCESS
        else:
            return RV_NOT_FOUND

    def ProcOneUsr(self, usrId):
        mainDb = self.GetMainDb()
        usr = id2usr(mainDb, self.m_dbId, usrId)
        endTime = time.time()
        DEBUG_PRINT("usr: " + str(usr) + ": " + str((endTime-self.m_startTime)*1000) + " ms")
        if usr:
            self.GetAllRefs(usr)

    def GetAllRefs(self, usr):
        self.m_startTime = time.time()
        dbIdList = self.GetDbIdListByRefUsr(usr)
        if dbIdList == []:
            dbIdList.append(self.m_dbId)
        endTime = time.time()
        DEBUG_PRINT("get all CUs: TIME: %s ms"%(str((endTime-self.m_startTime)*1000.0)))
        prevTime = 0
        DEBUG_PRINT("cu list: " + str(dbIdList))
        for dbId in dbIdList:
            DEBUG_PRINT("ref interval: " + str((time.time()-prevTime)*1000))
            prevTime = time.time()
            resultList = []
            db = self.GetDbByDbId(dbId)
            count = 0
            DEBUG_PRINT("time: open: " + dbId + ": " + str((time.time()-prevTime)*1000) + " ms")
            timeDb0 = time.time()
            usrId = usr2id(db, dbId, usr)
            DEBUG_PRINT("usrId: " + str(usrId))
            q = dbId + TABLE_NAME_LOCAL_USR_ID_TO_REF + "|" + str(usrId)
            rv = db.get(q)
            timeDb1 = time.time()
            DEBUG_PRINT("usr2ref: " + str(rv) + ": " + str(timeDb1-timeDb0) + " sec")
            if rv:
                rvList = rv.split(",")
                for rv in rvList:
                    nameId, line, col = rv.split("|")
                    name, fn = GetResultString(db, dbId, nameId)
                    if fn != None and name != None:
                        resultList.append((name, fn, line, col))
            for i in sorted(set(resultList)):
                resultName, resultFileName, resultLine, resultCol = i
                self.PrintResult(resultName, resultFileName, resultLine, resultCol)

class QueryHandlerOverride(QueryHandlerDecl):
    #
    # Handle Rquest for infomation about reference
    #
    def DoQuery(self):
        startTime = time.time()
        self.InitUsrDb()
        if self.InitDbByFilename(self.m_srcFileName) == None:
            print "ERROR: cannot open database of '%s'"%(self.m_srcFileName)
            sys.exit(1)
        usrIds = self.GetUsrIdList(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        found = False
        if usrIds:
            for id in usrIds:
                if self.ProcOneUsr(id) == RV_SUCCESS:
                    found = True
        if found:
            return RV_SUCCESS
        else:
            return RV_NOT_FOUND

    def ProcOneUsr(self, usrId):
        self.GetAllOverrides(usrId)

    def GetAllOverrides(self, usrId):
        resultList = []
        mainDb = self.GetMainDb()
        q = self.m_dbId + TABLE_NAME_LOCAL_USR_ID_TO_OVERRIDEE + "|" + str(usrId)
        rv = mainDb.get(q)
        DEBUG_PRINT("q: " + str(q))
        DEBUG_PRINT("usr2overridee: usrId=" + str(rv))

        if rv:
            rvList = rv.split(",")
            for rvUsrId in rvList:
                name, fn, line, col = self.QueryDeclInfo(rvUsrId)
                resultList.append((name, fn, line, col))
        for i in sorted(set(resultList)):
            resultName, resultFileName, resultLine, resultCol = i
            self.PrintResult(resultName, resultFileName, resultLine, resultCol)

class QueryHandlerOverrideN(HandlerBase):
    #
    # Handle Rquest for infomation about reference
    #
    def DoQuery(self):
        startTime = time.time()
        self.InitUsrDb()
        if self.InitDbByFilename(self.m_srcFileName) == None:
            print "ERROR: cannot open database of '%s'"%(self.m_srcFileName)
            sys.exit(1)
        usrIds = self.GetUsrIdList(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        found = False
        if usrIds:
            for id in usrIds:
                if self.ProcOneUsr(id) == RV_SUCCESS:
                    found = True
        if found:
            return RV_SUCCESS
        else:
            return RV_NOT_FOUND

    def ProcOneUsr(self, usrId):
        usr = id2usr(self.GetMainDb(), self.m_dbId, usrId)
        DEBUG_PRINT("usr: " + str(usr))
        if usr:
            self.GetAllOverriders(usr)

    def GetAllOverriders(self, usr):
        dbIdList = self.GetDbIdListByOverriderUsr(usr)
        DEBUG_PRINT("dbIdList: " + str(dbIdList))
        resultList = []
        for dbId in dbIdList:
            db = self.GetDbByDbId(dbId)
            usrId = usr2id(db, dbId, usr)
            q = dbId + TABLE_NAME_LOCAL_USR_ID_TO_OVERRIDER + "|" + str(usrId)
            DEBUG_PRINT("q: " + q)
            rv = db.get(q)
            DEBUG_PRINT("usr2overrirder: " + str(rv))
            if rv:
                rvList = rv.split(",")
                for rv in rvList:
                    nameId, line, col = rv.split("|")
                    name, fn = GetResultString(db, dbId, nameId)
                    if name != None and fn != None:
                        resultList.append((name, fn, line, col))
        for i in sorted(set(resultList)):
            name, fn, line, col = i
            self.PrintResult(name, fn, line, col)

class QueryHandlerDump(HandlerBase):
    #
    # Handle Rquest for dumping the contents of a table
    #

    mTableName = ""
    def DoQuery(self):
        for i in os.listdir(self.mDbDir + "/usr_db"):
            name = self.mDbDir + "/usr_db/" + i
            print "============ "+ name 
            db = Db(name)
            tmp = None
            for d in db.getItr():
                print(str(d))
            db.close()
        for i in os.listdir(self.mDbDir):
            if re.match("^[0-9a-f]+", i):
                name = self.mDbDir + "/" + i
                print "============ "+ name 
                db = Db(name)
                tmp = None
                for d in db.getItr():
                    print(str(d))
                db.close()

    def ParseArg(self, argv):
        if len(argv) != 0:
            usage()
            sys.exit(1)

class QueryHandlerRebuild(HandlerBase):
    def DoQuery(self):
        if self.InitDbByFilename(self.m_srcFileName) == None:
            print "ERROR: cannot open database of '%s'"%(self.m_srcFileName)
            sys.exit(1)
        rv = self.GetDb(self.m_dbId).get(self.m_dbId + TABLE_NAME_BUILD_INFO)
        if rv == None:
            print "ERROR: cannot obtain build options from the database."
            sys.exit(1)
        cuFileName, src_file_name, workDir, excludes, opt = rv.split("|")
        assert src_file_name == self.m_srcFileName
        if excludes != "":
            excludes = " -e " + excludes

        self.DeleteOldEntries(self.m_dbId)

        # rebuild
        cmd = "cxxtags -f " + excludes + " " + self.mDbDir + " " + cuFileName + " -- " + opt
        DEBUG_PRINT("cmd: " + cmd)
        self.CloseDb()
        (rv, out) = commands.getstatusoutput(cmd)
        print out
        if rv != 0:
            return RV_ERROR
        return 0

    def ParseArg(self, argv):
        if len(argv) != 1:
            usage()
            sys.exit(1)
        self.m_srcFileName = os.path.abspath(argv[0])

    def DeleteOldEntries(self, dbId):
        dbList = self.OpenAllDb()
        for db in dbList:
            batch = DbBatch(db)
            for d in db.getItr():
                key = d[0]
                keyLen = len(key)
                dbIdLen = len(dbId)
                if key.startswith(dbId) and (keyLen >= dbIdLen + 2) and key[len(dbId) + 1] == '|':
                    batch.delete(key)
            batch.flush()

def procOneDb(queryType, dbDir, argv):
    funcResult = 0
    if queryType == 'decl': # get a declaration or definition
        DEBUG_PRINT("decl start")
        handler = QueryHandlerDecl(dbDir)
        handler.ParseArg(argv)
        rv = handler.DoQuery()
        handler.CloseDb()
        if rv == RV_NOT_FOUND:
            DEBUG_PRINT("def start")
            handler = QueryHandlerDef(dbDir)
            handler.ParseArg(argv)
            rv = handler.DoQuery(True)
            handler.CloseDb()
        if rv == RV_ERROR:
            funcResult = 1
    elif queryType == 'dryrun': #
        with open(os.devnull,"w") as f:
            for i in os.listdir(dbDir + "/usr_db"):
                name = dbDir + "/usr_db/" + i
                print name
                db = Db(name)
                tmp = None
                res = ""
                for d in db.getItr():
                    f.write(str(d))
                print res
                db.close()
            for i in os.listdir(dbDir):
                if re.match("^[0-9a-f]+", i):
                    name = dbDir + "/" + i
                    print name
                    db = Db(name)
                    tmp = None
                    res = ""
                    for d in db.getItr():
                        f.write(str(d))
                    print res
                    db.close()
    else:
        if queryType == 'ref': # get all references
            handler = QueryHandlerRef(dbDir)
        elif queryType == 'def': # get a definition
            handler = QueryHandlerDef(dbDir)
        elif queryType == 'override': # get override information
            handler = QueryHandlerOverride(dbDir)
        elif queryType == 'overriden': # get overriden items
            handler = QueryHandlerOverrideN(dbDir)
        elif queryType == 'dump': # dump the contents of a table
            handler = QueryHandlerDump(dbDir)
        elif queryType == 'rebuild': # 
            handler = QueryHandlerRebuild(dbDir)
        else:
            print "ERROR: query type must be ref, decl, def, override, overriden, name or dump"
            return 1
        handler.ParseArg(argv)
        rv = handler.DoQuery()
        if rv == RV_ERROR:
            funcResult = 1
        handler.CloseDb()
    return funcResult

def main():
    global gVerboseMode
    result = []
    if len(sys.argv) <= 2:
        usage()
        sys.exit(1)

    # get global options
    gVerboseMode = 0
    try:
        optlist, argv = getopt.getopt(sys.argv[1:], 'v', [])
        for opt, val in optlist:
            if opt == "-v":
                gVerboseMode = 1
    except getopt.GetoptError, e:
        print "ERROR: getopt: ", e.args[0]
        sys.exit(1)

    rv = 0
    queryType = argv[0]
    dbDir = argv[1]
    funcResult = 0
    if queryType == 'genconfig':
        genCConfig(argv[1])
    else:
        dbDirList = dbDir.split(",")
        for db in dbDirList:
            rv = procOneDb(queryType, db, argv[2:])
            if rv != 0:
                print("ERROR: " + db)
                funcResult = 1
    return funcResult

#######
sys.exit(main())
