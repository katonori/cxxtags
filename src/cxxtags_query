#!/usr/bin/python
def usage():
    print 'usage: cxxtags_query decl/def/ref database_dir file_name line_no column_no'
    print '     : cxxtags_query         name database_dir item_name [-f file_name] [-l line_no] [-c column_no]'
    print '     : cxxtags_query         dump database_dir table_name'

import sys
import sqlite3
import cxxtags_util
import getopt
import re
import os

OUTPUT_DELIMITER = '|'

gDebugMode = 0
gPartialCompare = 0

class HandlerBase:
    """ Base class of *Handler classes """

    mAllDbFileList = None
    mDbDir = ""
    mUsrDbName = None

    def GetAllDbFiles(self):
        if self.mAllDbFileList == None:
            self.mAllDbFileList = cxxtags_util.get_db_file_list(self.mDbDir)
        return self.mAllDbFileList

    def GetUsrFromRefTable(self, db, fileName, lineNo, colNo):
        cur = db.cursor()
        q = 'SELECT usr_list.name, file_list.name, ref.line, ref.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_REF + ' WHERE file_list.name LIKE ? AND ref.line=? AND ref.col=?'
        argList = ()
        argList += ('%'+fileName,)
        argList += (lineNo,)
        argList += (colNo,)
        cur.execute(q, argList)
        result = cur.fetchall()
        usr = ""
        for row in result:
            resUsr, resFileName, resLine, resCol = row
            if fileName == "" or re.search(fileName + '$', resFileName):
                if usr == "":
                    usr = resUsr
                elif usr != resUsr:
                    print usr + ", " + resUsr
                    print "ERROR: Ambiguous query."
                    for row in result:
                        print row
                    return ""
        return usr

    def GetUsrFromDeclTable(self, db, fileName, lineNo, colNo):
        cur = db.cursor()
        q = 'SELECT usr_list.name, file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE file_list.name LIKE ? AND decl.line=? AND decl.col=?'
        argList = ()
        argList += ('%'+fileName,)
        argList += (lineNo,)
        argList += (colNo,)
        cur.execute(q, argList)
        result = cur.fetchall()
        usr = ""
        for row in result:
            resUsr, resFileName, resLine, resCol = row
            if fileName == "" or re.search(fileName + '$', resFileName):
                if usr == "":
                    usr = resUsr
                elif usr != resUsr:
                    print usr + ", " + resUsr
                    print "ERROR: Ambiguous query."
                    for row in result:
                        print row
                    return ""
        return usr

    def GetUsr(self, fileName, lineNo, colNo):
        if fileName == "":
            print "ERROR: specify file name"
            sys.exit(1)
        db_list = cxxtags_util.get_db_files_by_src_file_name(self.mDbDir, fileName)
        if db_list == []:
            print "ERROR: database file of \'%s\' not found:"%(fileName)
            sys.exit(1)
        # If multiple hit occur when absolute path is specified,
        # choose the file found the first.
        if fileName[0] != '/':
            # If file is a relative path and found multiple database files, treated as the file name is
            # ambiguous.
            if len(db_list) != 1 and fileName.find('/') != 0:
                print "ERROR: file name \"%s\" is ambiguous. spcecify an absolute path."%(fileName)
                sys.exit(1)
        fn = db_list[0]
        db = cxxtags_util.db_connect(fn)
        usr = self.GetUsrFromDeclTable(db, fileName, lineNo, colNo)
        if usr == "":
            usr = self.GetUsrFromRefTable(db, fileName, lineNo, colNo)
        db.close()
        if usr != "":
            self.mUsrDbName = fn
            return usr
        return None

    def GetMainSrcName(self):
        db = cxxtags_util.db_connect(self.mUsrDbName)
        cur = db.cursor()
        cur.execute("SELECT src_file_name FROM db_info;")
        result = cur.fetchone()
        db.close()
        return result[0]

    def PrintResult(self, name, fileName, line, col):
        print name + OUTPUT_DELIMITER + fileName + OUTPUT_DELIMITER + str(line) + OUTPUT_DELIMITER + str(col) + OUTPUT_DELIMITER + cxxtags_util.get_line_from_file(fileName, line)

class QueryHandlerDecl(HandlerBase):
    """ Handle Rquest for infomation about declarations """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, fileName, lineNo, colNo):
        usr = self.GetUsr(fileName, lineNo, colNo)
        if usr:
            result = self.QueryDeclInfo(usr)
            if result:
                resultName, resultFileName, resultLine, resultCol = result
                self.PrintResult(resultName, resultFileName, resultLine, resultCol)

    def QueryDeclInfo(self, usr):
        db = cxxtags_util.db_connect(self.mUsrDbName)
        cur = db.cursor()
        cur.execute('SELECT name_list.name, file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE usr_list.name=? ORDER BY decl.is_def LIMIT 1', (usr,))
        result = cur.fetchone()
        db.close()
        return result

class QueryHandlerDef(HandlerBase):
    """ Handle Rquest for infomation about definition """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, fileName, lineNo, colNo):
        usr = self.GetUsr(fileName, lineNo, colNo)
        if usr:
            result = self.GetDef(usr)
            if result:
                resultName, resultFileName, resultLine, resultCol = result
                self.PrintResult(resultName, resultFileName, resultLine, resultCol)

    def GetDef(self, usr):
        for fn in self.GetAllDbFiles():
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            cur.execute('SELECT name_list.name, file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE usr_list.name=? AND is_def=1 LIMIT 1;', (usr,))
            result = cur.fetchone()
            db.close()
            if result:
                return result
        return None

class QueryHandlerRef(HandlerBase):
    """ Handle Rquest for infomation about reference """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, fileName, lineNo, colNo):
        usr = self.GetUsr(fileName, lineNo, colNo)
        if usr:
            self.GetAllRefs(usr)

    def GetAllRefs(self, usr):
        resultList = []
        db_list = []
        mainSrcFile = self.GetMainSrcName()
        bn = os.path.basename(mainSrcFile)
        if re.match("c:"+bn, usr): # local scope
            db_list = [self.mUsrDbName,]
        else:
            db_list = self.GetAllDbFiles()
        for fn in db_list:
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            cur.execute('SELECT usr_list.id FROM usr_list WHERE name=?;', (usr,))
            row = cur.fetchone()
            if row:
                usrId = row[0]
                cur.execute('SELECT name_list.name, file_list.name, ref.line, ref.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_REF + ' WHERE ref.usr_id=?;', (usrId,))
                resultList += cur.fetchall()
            db.close()
        resultList = set(resultList)
        for i in resultList:
            resultName, resultFileName, resultLine, resultCol = i
            self.PrintResult(resultName, resultFileName, resultLine, resultCol)

class QueryHandlerOverride(HandlerBase):
    """ Handle Rquest for infomation about reference """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, fileName, lineNo, colNo):
        usr = self.GetUsr(fileName, lineNo, colNo)
        if usr:
            self.GetAllOverrides(usr)

    def GetAllOverrides(self, usr):
        resultList = []
        for fn in self.GetAllDbFiles():
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            cur.execute('SELECT usr_list.id FROM usr_list WHERE name=?;', (usr,))
            row = cur.fetchone()
            if row:
                usrId = row[0]
                cur.execute('SELECT overriden.usr_id, overriden.is_def FROM '+ cxxtags_util.QUERY_JOINED_TABLE_FILELIST_OVERRIDEN + ' WHERE overriden.overrider_usr_id=?;', (usrId,))
                overriderUsrList = cur.fetchall()
                for i in overriderUsrList:
                    overriderUsrId, overriderIsDef = i
                    overriderRow = cur.execute('SELECT name_list.name, file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE decl.usr_id=? AND decl.is_def=?;', (overriderUsrId, overriderIsDef))
                    result = overriderRow.fetchone()
                    resultList += (result,)
            db.close()
        resultList = set(resultList)
        for i in resultList:
            resultName, resultFileName, resultLine, resultCol = i
            self.PrintResult(resultName, resultFileName, resultLine, resultCol)

class QueryHandlerOverrideN(HandlerBase):
    """ Handle Rquest for infomation about reference """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, fileName, lineNo, colNo):
        usr = self.GetUsr(fileName, lineNo, colNo)
        if usr:
            self.GetAllOverriders(usr)

    def GetAllOverriders(self, usr):
        resultList = []
        for fn in self.GetAllDbFiles():
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            cur.execute('SELECT usr_list.id FROM usr_list WHERE name=?;', (usr,))
            row = cur.fetchone()
            if row:
                usrId = row[0]
                cur.execute('SELECT name_list.name, file_list.name, overriden.line, overriden.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_OVERRIDEN + ' WHERE overriden.usr_id=?;', (usrId,))
                resultList += cur.fetchall()
            db.close()
        resultList = set(resultList)
        for i in resultList:
            resultName, resultFileName, resultLine, resultCol = i
            self.PrintResult(resultName, resultFileName, resultLine, resultCol)

class QueryHandlerName(HandlerBase):
    """ Handle Rquest for infomation about name """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, name, fileName):
        global gDebugMode
        resultList = []
        dbList = cxxtags_util.get_db_files_by_src_file_name(self.mDbDir, fileName)
        if dbList == []:
            dbList = self.GetAllDbFiles()
        for fn in dbList:
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            #cur.execute('SELECT file_list.name, name_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE name_list.name LIKE ?;', ('%'+name+'%',))
            #cur.execute('SELECT name_list.name, name_list.id FROM name_list WHERE name_list.name LIKE ?;', ('%'+name+'%',))
            if gPartialCompare == 1:
                cur.execute('SELECT name_list.name, name_list.id FROM name_list WHERE name_list.name LIKE ?;', ('%'+name+'%',))
            else:
                cur.execute('SELECT name_list.name, name_list.id FROM name_list WHERE name_list.name=?;', (name,))
            result = cur.fetchall()
            for idRow in result:
                resultName, resultId = idRow
                if -1 != resultName.find(name): # exclude case mismatching
                    if gDebugMode != 0:
                        cur.execute('SELECT file_list.name, decl.line, decl.col, usr_list.name FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE decl.name_id=?;', (resultId, ))
                    else:
                        cur.execute('SELECT file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_FILELIST_DECL + ' WHERE decl.name_id=?;', (resultId, ))
                    rows = cur.fetchall()
                    for i in rows:
                        resultFileName, resultLineNo, resultColNo = i
                        self.PrintResult(resultName, resultFileName, resultLineNo, resultColNo)
                    resultList += rows
            db.close()

class QueryHandlerTable(HandlerBase):
    """ Handle Rquest for dumping the contents of a table """

    def __init__(self, dbDir):
        self.mDbDir = dbDir

    def DoQuery(self, tableName):
        dbList = self.GetAllDbFiles()
        tableQueryStr = ""
        if tableName == "decl":
            tableQueryStr = cxxtags_util.QUERY_JOINED_TABLE_DECL
        elif tableName == "ref":
            tableQueryStr = cxxtags_util.QUERY_JOINED_TABLE_REF
        else:
            print "ERROR: not such table: " + tableName
            return
        for fn in dbList:
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            cur.execute('SELECT * FROM ' + tableQueryStr)
            result = cur.fetchall()
            for i in result:
                print i
            db.close()

def parseArg():
    if len(sys.argv) != 6:
        usage()
        sys.exit(1)
    return sys.argv[2:]

def parseArgTable():
    if len(sys.argv) != 4:
        usage()
        sys.exit(1)
    return sys.argv[2:]

def parseArgName():
    global gDebugMode
    global gPartialCompare
    try:
        optlist, args = getopt.gnu_getopt(sys.argv[2:], 'f:dp', ['debug', 'partial'])
    except getopt.GetoptError, e:
        print "ERROR: getopt: ", e.args[0]
        sys.exit(1)
    if len(args) != 2:
        usage()
        sys.exit(1)
    dbDir = args[0]
    name = args[1]
    fileName = ""
    lineNo = -1
    colNo = -1
    for opt, val in optlist:
        if opt == "-f":
            fileName = val
        elif opt in ("-d", "--debug"):
            gDebugMode = 1
        elif opt in ("-p", "--partial"):
            gPartialCompare = 1
    return (dbDir, name, fileName, lineNo, colNo)

def main():
    result = []
    if len(sys.argv) <= 1:
        usage()
        sys.exit(1)
    queryType = sys.argv[1]
    if queryType == 'ref': # get all references
        dbDir, fileName, lineNo, colNo = parseArg()
        refHandler = QueryHandlerRef(dbDir)
        refHandler.DoQuery(fileName, lineNo, colNo)
    elif queryType == 'decl': # get a declaration or definition
        dbDir, fileName, lineNo, colNo = parseArg()
        declHandler = QueryHandlerDecl(dbDir)
        declHandler.DoQuery(fileName, lineNo, colNo)
    elif queryType == 'def': # get a definition
        dbDir, fileName, lineNo, colNo = parseArg()
        defHandler = QueryHandlerDef(dbDir)
        defHandler.DoQuery(fileName, lineNo, colNo)
    elif queryType == 'override': # get override information
        dbDir, fileName, lineNo, colNo = parseArg()
        handler = QueryHandlerOverride(dbDir)
        handler.DoQuery(fileName, lineNo, colNo)
    elif queryType == 'overriden': # get overriden items
        dbDir, fileName, lineNo, colNo = parseArg()
        handler = QueryHandlerOverrideN(dbDir)
        handler.DoQuery(fileName, lineNo, colNo)
    elif queryType == 'name': # search a name
        dbDir, name, fileName, lineNo, colNo = parseArgName()
        nameHandler = QueryHandlerName(dbDir)
        nameHandler.DoQuery(name, fileName)
    elif queryType == 'dump': # dump the contents of a table
        dbDir, tableName = parseArgTable()
        handler = QueryHandlerTable(dbDir)
        handler.DoQuery(tableName)
    else:
        print "ERROR: query type must be ref, decl, def, override, overriden or name"
        sys.exit(1)

#######
main()
