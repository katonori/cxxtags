#!/usr/bin/python
def usage():
    print 'usage: cxxtags_query decl/def/ref/type database_dir file_name line_no column_no'
    print '     : cxxtags_query              name database_dir item_name [-f file_name] [-l line_no] [-c column_no]'
    print '     : cxxtags_query              dump database_dir table_name'

import sys
import plyvel
import cxxtags_util
import getopt
import re
import os
import time

OUTPUT_DELIMITER = '|'
SCRIPT_DIR = os.path.dirname(__file__)

gDebugMode = 0
gVerboseMode = 0
gPartialCompare = 0

def DEBUG_PRINT(str):
    global gVerboseMode
    if gVerboseMode != 0:
        print str

class HandlerBase:
    #
    # Base class of *Handler classes
    #

    mAllDbFileList = None
    mDbDir = ""
    mDb = None
    mFileListDb = None
    mUsrDbName = None
    m_srcFileName = ""
    m_cuName = ""
    m_cuId = 0
    m_colNo = 0

    def __init__(self, dbDir):
        self.mUsrDbList = []
        self.mDbDir = dbDir + "/"
        self.mFileListDb = plyvel.DB(dbDir + "/common")

    def Filename2CompileUnit(self, fn):
        DEBUG_PRINT("fn: " + fn)
        q = "file_list|" + fn
        cuId, fileId = self.mFileListDb.get(q).split(",")
        DEBUG_PRINT("q: " + str(q))
        DEBUG_PRINT("cuId: " + str(cuId))
        cuName = self.mFileListDb.get("id2cu|" + cuId)
        return cuName, cuId

    def GlobalFileId2CompileUnit(self, id):
        DEBUG_PRINT("global fid: " + id)
        q = "fid2cuid|" + id
        cuId = self.mFileListDb.get(q)
        DEBUG_PRINT("q: " + str(q))
        DEBUG_PRINT("cuId: " + str(cuId))
        cuName = self.mFileListDb.get("id2cu|" + cuId)
        return cuName, cuId

    def InitDb(self, srcFileName):
        (self.m_cuName, self.m_cuId) = self.Filename2CompileUnit(srcFileName)
        if self.m_cuName == None:
            print("ERROR: could not determin compile unit name: " + srcFileName)
            return None
        DEBUG_PRINT("CU: " + self.m_cuName)
        self.mDb = self.OpenDbName(self.m_cuName)
        if self.mDb == None:
            print("ERROR: db open")
            return None
        dbList = os.listdir(self.mDbDir + "/usr_db")
        for dir in dbList:
            if re.match("^[0-9]+$", dir):
                db = plyvel.DB(self.mDbDir + "/usr_db/" + dir)
                if db == None:
                    print("ERROR: db open: " + str(dir))
                    return None
                self.mUsrDbList.append(db)
        DEBUG_PRINT("usrDbList: " + str(self.mUsrDbList))
        return self.mDb

    def Cu2Id(self, cuName):
        return self.mFileListDb.get("cu2id|" + cuName)

    def Id2Cu(self, cuId):
        return self.mFileListDb.get("id2cu|" + cuId)

    def OpenDbId(self, cuId):
        cmd = self.mDbDir + cuId
        DEBUG_PRINT("OpenDbId: " + cmd)
        db = plyvel.DB(cmd)
        if db == None:
            print("ERROR:1: db_dir: "  + cuId)
            return None
        return db

    def OpenDbName(self, cuName):
        dirNo = self.mFileListDb.get("cu2id|" + cuName)
        if dirNo == None:
            print("ERROR:0: db_dir: "  + cuName)
            return None
        DEBUG_PRINT("OpenDbName: " + self.mDbDir + dirNo + ", " + cuName)
        db = plyvel.DB(self.mDbDir + dirNo)
        if db == None:
            print("ERROR:1: db_dir: "  + cuName)
            return None
        return db

    def OpenRefDb(self, cuName):
        db = plyvel.DB(self.mDbDir + "common")
        if db == None:
            print("ERROR:1: db_dir: "  + cuName)
            return None
        return db

    def GetAllDbFiles(self):
        if self.mAllDbFileList == None:
            self.mAllDbFileList = cxxtags_util.get_db_file_list(self.mDbDir)
        return self.mAllDbFileList

    #
    # get USR from location information.
    #
    def GetUsrId(self, fileName, lineNo, colNo):
        if fileName == "":
            print "ERROR: specify file name"
            sys.exit(1)
        fid = file2id(self.mDb, fileName)
        q = "pos2usr|%s|%s|%s"%(fid, lineNo, colNo)
        DEBUG_PRINT("q: " + q)
        usr = self.mDb.get(q)
        DEBUG_PRINT("usrId: " + str(usr))
        if usr == None:
            DEBUG_PRINT("pos2usr failed: " + q)
            return None
        return usr

    def GetCuidListFromUsr(self, usr):
        cuIdList = []
        for db in self.mUsrDbList:
            res = db.get("usr2file|" + usr)
            if res:
                for fid in res.split(","):
                    name, cuid = self.GlobalFileId2CompileUnit(fid)
                    cuIdList.append(cuid)
        if cuIdList == []:
            cuIdList.append(self.m_cuId)
        return list(set(cuIdList))

    def CloseDb(self):
        if self.mDb:
            self.mDb.close()
        if self.mFileListDb:
            self.mFileListDb.close()
        for db in self.mUsrDbList:
            db.close()

    def PrintResult(self, name, fileName, line, col):
        lineInt = int(line, 16)
        colInt = int(col, 16)
        print str(name) + OUTPUT_DELIMITER + str(fileName) + OUTPUT_DELIMITER + str(lineInt) + OUTPUT_DELIMITER + str(colInt) + OUTPUT_DELIMITER + str(cxxtags_util.get_line_from_file(fileName, lineInt))

def id2name(db, id):
    result = db.get("id2name|%s"%(str(id)))
    return result
def id2file(db, id):
    result = db.get("id2file|%s"%(str(id)))
    return result
def file2id(db, filename):
    result = db.get("file2id|%s"%(filename))
    return result
def id2usr(db, id):
    result = db.get("id2usr|%s"%(str(id)))
    return result

class QueryHandlerDecl(HandlerBase):
    #
    # Handle Rquest for infomation about declarations
    #
    def DoQuery(self):
        if None == self.InitDb(self.m_srcFileName):
            print("ERROR: InitDb() failed")
            return None
        usrId = self.GetUsrId(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        DEBUG_PRINT("usrId: " + str(usrId))
        if usrId:
            result = self.QueryDeclInfo(usrId)
            if result:
                name, fileName, line, col = result
                self.PrintResult(name, fileName, line, col)
                return True
        # search def table in this compile unit
        return False

    def QueryDeclInfo(self, usrId):
        decl = self.mDb.get("usr2decl|%s"%(usrId))
        DEBUG_PRINT("decl: " + str(decl))
        if decl:
            declList = decl.split("|")
            nameId, fileId, line, col = tuple(declList)
            fileName = id2file(self.mDb, fileId)
            if fileName == None:
                print "ERROR: id2file: " + str(fileId) + "," + str(self.m_cuId)
                return None
            name = id2name(self.mDb, nameId)
            if fileName == None:
                print "ERROR: id2name: " + str(nameid) + "," + str(self.m_cuId)
                return None
            return name, fileName, line, col
        return None

    def parseArg(self, argv):
        if len(argv) != 3:
            usage()
            sys.exit(1)
        self.m_srcFileName, self.m_lineNo, self.m_colNo = argv
        self.m_lineNo = format(int(self.m_lineNo), 'x')
        self.m_colNo = format(int(self.m_colNo), 'x')
        self.m_srcFileName = os.path.abspath(self.m_srcFileName)
        DEBUG_PRINT("src: " + self.m_srcFileName)

class QueryHandlerDef(HandlerBase):
    #
    # Handle Rquest for infomation about definition
    #
    m_isOnlyMainCompileUnit = False
    def DoQuery(self, isOnlyMainCompileUnit):
        self.m_isOnlyMainCompileUnit = isOnlyMainCompileUnit
        if None == self.InitDb(self.m_srcFileName):
            print "ERROR: Db open"
            return None
        usrId = self.GetUsrId(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        usr = id2usr(self.mDb, usrId)
        DEBUG_PRINT("usr: " + str(usr))
        if usr:
            result = self.GetDef(usr)
            for r in result:
                name, fileName, line, col = r
                self.PrintResult(name, fileName, line, col)

    def GetDef(self, usr):
        cuIdList = []
        if self.m_isOnlyMainCompileUnit == False:
            for db in self.mUsrDbList:
                res = db.get("usr2file|" + usr)
                if res:
                    DEBUG_PRINT("usr2file: " +  res)
                    for fid in res.split(","):
                        name, cuid = self.GlobalFileId2CompileUnit(fid)
                        DEBUG_PRINT("cu: " + name + "," + str(cuid))
                        cuIdList.append(cuid)
        if cuIdList == []:
            #print "ERROR: usr2file: " + usr
            #return None
            cuIdList.append(self.m_cuId)

        result = []
        for cuId in cuIdList:
            if cuId == self.m_cuId:
                db = self.mDb
            else:
                db = self.OpenDbId(cuId)
            q = "usr2def|%s"%(usr)
            DEBUG_PRINT("q: " + q)
            DEBUG_PRINT("db: " + str(db))
            resDef = db.get(q)
            DEBUG_PRINT("def: " + str(resDef))
            if resDef:
                defList = resDef.split("|")
                nameId, fileId, line, col = tuple(defList)
                name = id2name(db, nameId)
                if name == None:
                    print("ERRRO: name lookup failed: " + str(fileId))
                    return None
                fileName = id2file(db, fileId)
                if fileName == None:
                    print("ERRRO: file name lookup failed: " + str(fileId))
                    return None
                result.append((name, fileName, line, col))
            if db != self.mDb:
                db.close()
        return result

    def parseArg(self, argv):
        if len(argv) != 3:
            usage()
            sys.exit(1)
        self.m_srcFileName, self.m_lineNo, self.m_colNo = argv
        self.m_lineNo = format(int(self.m_lineNo), 'x')
        self.m_colNo = format(int(self.m_colNo), 'x')
        self.m_srcFileName = os.path.abspath(self.m_srcFileName)

class QueryHandlerRef(HandlerBase):
    #
    # Handle Rquest for infomation about reference
    #
    def DoQuery(self):
        startTime = time.time()
        # get compileunit
        if None == self.InitDb(self.m_srcFileName):
            print "ERROR: DB oopen"
            return None
        usrId = self.GetUsrId(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        usr = id2usr(self.mDb, usrId)
        endTime = time.time()
        DEBUG_PRINT("usr: " + str(usr) + ": " + str((endTime-startTime)*1000) + " ms")
        if usr:
            self.GetAllRefs(usr)

    def GetAllRefs(self, usr):
        cuIdList = []
        for db in self.mUsrDbList:
            res = db.get("usr2file|" + usr)
            if res:
                for fid in res.split(","):
                    name, cuid = self.GlobalFileId2CompileUnit(fid)
                    cuIdList.append(cuid)
        if cuIdList == []:
            cuIdList.append(self.m_cuId)
            #print "ERROR: usr2file: " + usr
            #return None

        prevTime = 0
        for cuId in cuIdList:
            DEBUG_PRINT("ref interval: " + str((time.time()-prevTime)*1000))
            prevTime = time.time()
            resultList = []
            if cuId == self.m_cuId:
                db = self.mDb
            else:
                db = self.OpenDbId(cuId)
            count = 0
            DEBUG_PRINT("time: open: " + str((time.time()-prevTime)*1000) + " ms")
            q = "usr2ref|" + str(usr) + "|" + str(cuId)
            rv = db.get(q)
            DEBUG_PRINT("usr2ref: " + str(rv))
            if rv:
                rvList = rv.split(",")
                for rv in rvList:
                    nameId, fileId, line, col = \
                            rv.split("|")
                    name = id2name(db, nameId)
                    if name == None:
                        print("ERRRO: name lookup failed: " + str(nameId) + ": " + cuId)
                        return None
                    fn = id2file(db, fileId)
                    if fn == None:
                        print("ERRRO: file name lookup failed: " + str(fileId) + ": " + cuId)
                        return None
                    resultList.append((name, fn, line, col))
            if db != self.mDb:
                db.close()
            for i in resultList:
                resultName, resultFileName, resultLine, resultCol = i
                self.PrintResult(resultName, resultFileName, resultLine, resultCol)

    def parseArg(self, argv):
        if len(argv) != 3:
            usage()
            sys.exit(1)
        self.m_srcFileName, self.m_lineNo, self.m_colNo = argv
        self.m_lineNo = format(int(self.m_lineNo), 'x')
        self.m_colNo = format(int(self.m_colNo), 'x')

class QueryHandlerOverride(HandlerBase):
    #
    # Handle Rquest for infomation about reference
    #
    def DoQuery(self):
        startTime = time.time()
        # get compileunit
        if None == self.InitDb(self.m_srcFileName):
            print "ERROR: DB oopen"
            return None
        usrId = self.GetUsrId(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        usr = id2usr(self.mDb, usrId)
        DEBUG_PRINT("usr: " + str(usr))
        if usr:
            self.GetAllOverrides(usr)

    def GetAllOverrides(self, usr):
        cuIdList = self.GetCuidListFromUsr(usr)
        DEBUG_PRINT("cuIdList: " + str(cuIdList))
        for cuId in cuIdList:
            resultList = []
            if cuId == self.m_cuId:
                db = self.mDb
            else:
                db = self.OpenDbId(cuId)
            count = 0
            q = "usr2overrirden|" + str(usr)
            rv = db.get(q)
            DEBUG_PRINT("usr2overrirden: " + str(rv))
            if rv:
                rvList = rv.split(",")
                for rv in rvList:
                    nameId, fileId, line, col = \
                            rv.split("|")
                    name = id2name(db, nameId)
                    if name == None:
                        print("ERRRO: name lookup failed: " + str(nameId) + ": " + cuId)
                        return None
                    fn = id2file(db, fileId)
                    if fn == None:
                        print("ERRRO: file name lookup failed: " + str(fileId) + ": " + cuId)
                        return None
                    resultList.append((name, fn, line, col))
            if db != self.mDb:
                db.close()
            for i in resultList:
                resultName, resultFileName, resultLine, resultCol = i
                self.PrintResult(resultName, resultFileName, resultLine, resultCol)

    def parseArg(self, argv):
        if len(argv) != 3:
            usage()
            sys.exit(1)
        self.m_srcFileName, self.m_lineNo, self.m_colNo = argv
        self.m_lineNo = format(int(self.m_lineNo), 'x')
        self.m_colNo = format(int(self.m_colNo), 'x')

class QueryHandlerOverrideN(HandlerBase):
    #
    # Handle Rquest for infomation about reference
    #
    def DoQuery(self):
        startTime = time.time()
        # get compileunit
        if None == self.InitDb(self.m_srcFileName):
            print "ERROR: DB oopen"
            return None
        usrId = self.GetUsrId(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        usr = id2usr(self.mDb, usrId)
        DEBUG_PRINT("usr: " + str(usr))
        if usr:
            self.GetAllOverriders(usr)

    def GetAllOverriders(self, usr):
        cuIdList = self.GetCuidListFromUsr(usr)
        DEBUG_PRINT("cuIdList: " + str(cuIdList))
        for cuId in cuIdList:
            resultList = []
            if cuId == self.m_cuId:
                db = self.mDb
            else:
                db = self.OpenDbId(cuId)
            count = 0
            q = "usr2overrirden|" + str(usr)
            DEBUG_PRINT("q: " + q)
            rv = db.get(q)
            DEBUG_PRINT("usr2overrirden: " + str(rv))
            if rv:
                rvList = rv.split(",")
                for rv in rvList:
                    print rv
                    nameId, fileId, line, col = rv.split("|")
                    name = id2name(db, nameId)
                    if name == None:
                        print("ERRRO: name lookup failed: " + str(nameId) + ": " + cuId)
                        return None
                    fn = id2file(db, fileId)
                    DEBUG_PRINT("name: " + str(nameId) + "," + str(name))
                    DEBUG_PRINT("filename: " + str(fileId) + "," + str(fn))
                    if fn == None:
                        print("ERRRO: file name lookup failed: " + str(fileId) + ": " + cuId)
                        return None
                    resultList.append((name, fn, line, col))
            if db != self.mDb:
                db.close()
            for i in resultList:
                resultName, resultFileName, resultLine, resultCol = i
                DEBUG_PRINT("n: " + str(resultName))
                DEBUG_PRINT("fn: " + str(resultFileName))
                self.PrintResult(resultName, resultFileName, resultLine, resultCol)

    def parseArg(self, argv):
        if len(argv) != 3:
            usage()
            sys.exit(1)
        self.m_srcFileName, self.m_lineNo, self.m_colNo = argv
        self.m_lineNo = format(int(self.m_lineNo), 'x')
        self.m_colNo = format(int(self.m_colNo), 'x')

class QueryHandlerName(HandlerBase):
    #
    # Handle Rquest for infomation about name
    #
    mName = 0
    def DoQuery(self):
        global gDebugMode
        resultList = []
        dbList = cxxtags_util.get_db_files_by_src_file_name(self.mDbDir, self.m_srcFileName)
        if dbList == []:
            dbList = self.GetAllDbFiles()
        for fn in dbList:
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            #cur.execute('SELECT file_list.name, name_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE name_list.name LIKE ?;', ('%'+name+'%',))
            #cur.execute('SELECT name_list.name, name_list.id FROM name_list WHERE name_list.name LIKE ?;', ('%'+name+'%',))
            if gPartialCompare == 1:
                cur.execute('SELECT name_list.name, name_list.id FROM name_list WHERE name_list.name LIKE ?;', ('%'+self.mName+'%',))
            else:
                cur.execute('SELECT name_list.name, name_list.id FROM name_list WHERE name_list.name=?;', (self.mName,))
            result = cur.fetchall()
            for idRow in result:
                resultName, resultId = idRow
                if -1 != resultName.find(self.mName): # exclude case mismatching
                    if gDebugMode != 0:
                        cur.execute('SELECT file_list.name, decl.line, decl.col, usr_list.name FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE decl.name_id=?;', (resultId, ))
                    else:
                        cur.execute('SELECT file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_FILELIST_DECL + ' WHERE decl.name_id=?;', (resultId, ))
                    rows = cur.fetchall()
                    for i in rows:
                        resultFileName, resultLineNo, resultColNo = i
                        self.PrintResult(resultName, resultFileName, resultLineNo, resultColNo)
                    resultList += rows
            db.close()

    def parseArg(self, argv):
        global gDebugMode
        global gPartialCompare
        try:
            optlist, args = getopt.gnu_getopt(argv, 'f:dp', ['debug', 'partial'])
        except getopt.GetoptError, e:
            print "ERROR: getopt: ", e.args[0]
            sys.exit(1)
        if len(args) != 2:
            usage()
            sys.exit(1)
        name = args[1]
        fileName = ""
        lineNo = -1
        colNo = -1
        for opt, val in optlist:
            if opt == "-f":
                fileName = val
            elif opt in ("-d", "--debug"):
                gDebugMode = 1
            elif opt in ("-p", "--partial"):
                gPartialCompare = 1
        self.mName = name
        self.m_srcFileName = fileName
        self.m_lineNo = lineNo
        self.m_colNo = colNo

class QueryHandlerTable(HandlerBase):
    #
    # Handle Rquest for dumping the contents of a table
    #

    mTableName = ""
    def DoQuery(self):
        dbList = self.GetAllDbFiles()
        tableQueryStr = ""
        tableQueryCondStr = ""
        if self.mTableName == "decl":
            tableQueryStr = cxxtags_util.QUERY_JOINED_TABLE_DECL
        elif self.mTableName == "def":
            tableQueryStr = cxxtags_util.QUERY_JOINED_TABLE_DECL
            tableQueryCondStr = "WHERE decl.is_def=1"
        elif self.mTableName == "ref":
            tableQueryStr = cxxtags_util.QUERY_JOINED_TABLE_REF
        elif self.mTableName == "base_class":
            tableQueryStr = cxxtags_util.QUERY_JOINED_TABLE_BASE_CLASS
        else:
            print "ERROR: not such table: " + self.mTableName
            return
        for fn in dbList:
            db = cxxtags_util.db_connect(fn)
            cur = db.cursor()
            cur.execute('SELECT * FROM ' + tableQueryStr + ' ' + tableQueryCondStr)
            result = cur.fetchall()
            for i in result:
                print i
            db.close()

    def parseArg(self, argv):
        if len(argv) != 1:
            usage()
            sys.exit(1)
        self.mTableName = argv[0]

class QueryHandlerType(HandlerBase):
    #
    # Handle Rquest for infomation about type
    #
    def DoQuery(self):
        usr = self.GetUsrId(self.m_srcFileName, self.m_lineNo, self.m_colNo)
        DEBUG_PRINT("usr: " + str(usr))
        if usr:
            typeUsr = self.GetTypeUsr(usr, self.m_srcFileName, self.m_lineNo, self.m_colNo)
            usrList = self.GetBaseClassInfo(typeUsr)
            if usrList:
                for i in usrList:
                    baseUsr, accessibility = i
                    self.GetTypeInfo(baseUsr, self.m_srcFileName, self.m_lineNo, self.m_colNo)
            self.GetTypeInfo(typeUsr, self.m_srcFileName, self.m_lineNo, self.m_colNo)

    def GetTypeInfo(self, typeUsr, fileName, lineNo, colNo):
        done_dict = {}
        if typeUsr != "":
            try:
                db = cxxtags_util.db_connect(self.mUsrDbName)
                cur = db.cursor()
                # get type name
                q = 'SELECT name_list.name FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE usr_list.name=?'
                cur.execute(q, (typeUsr,))
                result = cur.fetchone()
                typeName = ""
                if result:
                    typeName, = result
                q = 'SELECT usr_list.name, name_list.name, file_list.name, decl.line, decl.col FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE usr_list.name LIKE ? ORDER BY decl.is_def'
                cur.execute(q, (typeUsr+'%',))
                result = cur.fetchall()
            except sqlite3.Error, e:
                print "ERROR: type info: ", e.args[0]
                sys.exit(1)
            finally:
                db.close()
            typeUsrPrint = typeUsr.replace("c:", "")
            typeUsrPrint = typeUsrPrint.replace("@N@", "::")
            typeUsrPrint = typeUsrPrint.replace("@C@", "::")
            for i in result:
                resultUsr, resultName, resultFileName, resultLine, resultCol = i
                if done_dict.has_key(resultUsr):
                    continue
                done_dict[resultUsr] = 1
                if resultUsr.find(typeUsr+"@FI@") != -1: # val
                    resultUsr = resultUsr.replace(typeUsr+"@FI@", "")
                    self.PrintResult(resultName, typeName, resultFileName, resultLine, resultCol, "value")
                elif resultUsr.find(typeUsr+"@F@") != -1: # function
                    resultUsr = resultUsr.replace(typeUsr+"@F@", "")
                    resultUsr = re.sub('#.*$', "", resultUsr)
                    self.PrintResult(resultName, typeName, resultFileName, resultLine, resultCol, "function")
                elif resultUsr.find(typeUsr+"@") != -1:
                    self.PrintResult(resultUsr, typeName, resultFileName, resultLine, resultCol, "other")

    def GetTypeUsr(self, usr, fileName, lineNo, colNo):
        try:
            db = cxxtags_util.db_connect(self.mUsrDbName)
            cur = db.cursor()
            q = 'SELECT usr_list_type.name FROM '+ cxxtags_util.QUERY_JOINED_TABLE_DECL + ' WHERE usr_list.name=? LIMIT 1'
            cur.execute(q, (usr,))
            result = cur.fetchone()
        except sqlite3.Error, e:
            print "ERROR: GetTypeUsr: ", e.args[0]
            sys.exit(1)
        finally:
            db.close()
        typeUsr, = result
        return typeUsr

    def GetBaseClassInfo(self, usr):
        try:
            db = cxxtags_util.db_connect(self.mUsrDbName)
            cur = db.cursor()
            q = 'SELECT usr_list_base.name, base_class.accessibility FROM '+ cxxtags_util.QUERY_JOINED_TABLE_BASE_CLASS + ' WHERE usr_list.name=?'
            cur.execute(q, (usr,))
            result = cur.fetchall()
        except sqlite3.Error, e:
            print "ERROR: type info: ", e.args[0]
            sys.exit(1)
        finally:
            db.close()
        return result

    def parseArg(self, argv):
        if len(argv) != 3:
            usage()
            sys.exit(1)
        self.m_srcFileName, self.m_lineNo, self.m_colNo = argv
        self.m_srcFileName = os.path.abspath(self.m_srcFileName)

    def PrintResult(self, name, typeName, fileName, line, col, kind):
        print typeName + OUTPUT_DELIMITER + name + OUTPUT_DELIMITER + fileName + OUTPUT_DELIMITER + str(line) + OUTPUT_DELIMITER + str(col) + OUTPUT_DELIMITER + kind + OUTPUT_DELIMITER + cxxtags_util.get_line_from_file(fileName, line)

def main():
    global gVerboseMode
    result = []
    if len(sys.argv) <= 2:
        usage()
        sys.exit(1)

    # get global options
    gVerboseMode = 0
    try:
        optlist, argv = getopt.getopt(sys.argv[1:], 'v', [])
        for opt, val in optlist:
            if opt == "-v":
                gVerboseMode = 1
    except getopt.GetoptError, e:
        print "ERROR: getopt: ", e.args[0]
        sys.exit(1)

    queryType = argv[0]
    dbDir = argv[1]
    if queryType == 'ref': # get all references
        handler = QueryHandlerRef(dbDir)
        handler.parseArg(argv[2:])
        handler.DoQuery()
        handler.CloseDb()
    elif queryType == 'decl': # get a declaration or definition
        DEBUG_PRINT("decl start")
        handler = QueryHandlerDecl(dbDir)
        handler.parseArg(argv[2:])
        if False == handler.DoQuery():
            handler.CloseDb()
            DEBUG_PRINT("def start")
            handler = QueryHandlerDef(dbDir)
            handler.parseArg(argv[2:])
            handler.DoQuery(True)
            handler.CloseDb()
    elif queryType == 'def': # get a definition
        handler = QueryHandlerDef(dbDir)
        handler.parseArg(argv[2:])
        handler.DoQuery(False)
        handler.CloseDb()
    elif queryType == 'override': # get override information
        handler = QueryHandlerOverride(dbDir)
        handler.parseArg(argv[2:])
        handler.DoQuery()
        handler.CloseDb()
    elif queryType == 'overriden': # get overriden items
        handler = QueryHandlerOverrideN(dbDir)
        handler.parseArg(argv[2:])
        handler.DoQuery()
        handler.CloseDb()
    elif queryType == 'name': # search a name
        handler = QueryHandlerName(dbDir)
        handler.parseArg(argv[2:])
        handler.DoQuery()
        handler.CloseDb()
    elif queryType == 'dump': # dump the contents of a table
        handler = QueryHandlerTable(dbDir)
        handler.parseArg(argv[2:])
        handler.DoQuery()
        handler.CloseDb()
    elif queryType == 'type': # get type info
        handler = QueryHandlerType(dbDir)
        handler.parseArg(argv[2:])
        handler.DoQuery()
        handler.CloseDb()
    else:
        print "ERROR: query type must be ref, decl, def, override, overriden, name, dump or type"
        sys.exit(1)

#######
main()
