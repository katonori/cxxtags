#!/usr/bin/env python

import json, sys, re, commands, os, getopt, time
from xml.etree.ElementTree import *
from subprocess import Popen, PIPE
import multiprocessing
import logging

CXXTAGS = "cxxtags"

class ProjParserBase():
    m_dbname = ""
    m_filename = ""
    def __init__(self, dbname, filename):
        self.m_dbname = dbname
        self.m_filename = filename
    def GetDbDir(self):
        return self.m_dbname

class MKParser(ProjParserBase):
    def Run(self):
        with open(self.m_filename) as f:
            dirname = ""
            resultList = []
            for l in f.readlines():
                l = l.replace("\n", "")
                m = re.search("Entering directory [`'](.+)'$", l)
                if m:
                    dirname = m.group(1)
                else:
                    l = re.sub("^\S+", "", l)
                    #print l
                    m = re.search("(\S+\.(cpp|c|cxx|cc))[\s$]", l)
                    srcFile = ""
                    if m:
                        srcFile = m.group(1)
                    resultList.append((dirname, "", l, srcFile))
        return resultList

class CmakeJsonParser(ProjParserBase):
    def Run(self):
        with open(self.m_filename) as f:
            data = json.load(f)

        resultList = []
        for i in data:
            dirname = i["directory"]
            filename = i["file"]
            args = i["command"]
            # remove the command
            args = re.sub("^\S+", "", args)
            # remove output name
            args = re.sub("\s-o\s*\S+", " ", args)
            # remove source name
            args = args.replace(filename, "")
            resultList.append((dirname, "", args, filename))
        return resultList

class VSParser(ProjParserBase):
    m_elemPrefix = ""
    m_projConfigList = []
    m_itemDefinitionGroup = {}
    m_includePath = {}
    m_sourceFiles = []
    m_isCygwin = os.sep != '\\'
    m_solDir = ""
    m_curProjDir = ""

    def clear(self):
        self.m_sourceFiles = []

    def convPath(self, path):
        if self.m_isCygwin:
            path = path.replace('\\', '/')
            path = re.sub("%\(.+\)", "", path)
            m = re.match("^([a-zA-Z]):/", path)
            if m: # abspath
                drive = m.group(1)
                path = path.replace(drive + ":/", "/cygdrive/" + drive + "/")
        return path

    def procNode(self, elem):
        tag = elem.tag
        if tag == (self.m_elemPrefix+"ProjectConfiguration"):
            name = self.m_elemPrefix+"Configuration"
            config =  elem.find(name).text
            name = self.m_elemPrefix+"Platform"
            platform =  elem.find(name).text
            self.m_projConfigList.append(config + "|" + platform)
            #print "config: " + config
        elif tag == (self.m_elemPrefix+"ItemDefinitionGroup"):
            """
            " build options
            """
            m = re.search("=='(.+)'", elem.get("Condition"))
            if m:
                cond = m.group(1)
                # definitions
                defElem = elem.find("*"+self.m_elemPrefix+"PreprocessorDefinitions")
                if defElem != None:
                    self.m_itemDefinitionGroup[cond] = defElem.text
                # include paths
                defElem = elem.find("*"+self.m_elemPrefix+"AdditionalIncludeDirectories")
                if defElem != None:
                    pathList = defElem.text.split(";")
                    #print pathList
                    i = 0
                    while i < len(pathList):
                        #
                        # replace delimiter
                        #
                        pathList[i] = self.convPath(pathList[i])
                        i += 1
                    #print pathList
                    self.m_includePath[cond] = ";".join(pathList)
            else:
                print "ERROR: invalid condition"
        elif tag == (self.m_elemPrefix+"ItemGroup"):
            """
            " source files
            """
            key = "./"+self.m_elemPrefix+"ClCompile"
            defElemList = elem.findall(key)
            for e in defElemList:
                src = e.get("Include")
                if not re.match("^[a-zA-Z]:", src):
                    src = self.m_curProjDir + os.sep + e.get("Include")
                print "src: " + src
                self.m_sourceFiles.append(self.convPath(src))

    def Run(self):
        slnFile = self.m_filename
        self.m_solDir = os.path.dirname(os.path.abspath(slnFile))
        #print self.m_solDir

        projList = []
        #Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "test0", "test0\test0.vcxproj", "{698FC758-5285-46CE-A4ED-7655649BC95E}"
        with open(slnFile) as f:
            for l in f.readlines():
                m = re.search('Project\(".+"\)\s*=\s*"([^"]+)"\s*,\s*"([^"]+)"', l)
                if m:
                    projList.append(m.group(2))
        if projList == []:
            print "ERROR: not project found"
            sys.exit(1)

        resultList = []
        # proc projects
        for prj in projList:
            self.clear()
            abspath = self.convPath(self.m_solDir + os.sep + prj)
            self.m_curProjDir = os.path.dirname(abspath)
            tree = parse(abspath)
            elem = tree.getroot()
            m = re.search("({.+}).+", elem.tag)
            if m:
                self.m_elemPrefix = m.group(1)
            for e in elem.getiterator():
                self.procNode(e)

            # dump
            print "projDir: " + self.m_curProjDir
            #print "project: " + prj
            #print self.m_curProjDir
            #print abspath
            # dump result
            keys = self.m_itemDefinitionGroup.keys()
            if len(keys) != 0:
                config = keys[0]
                #print "config: " + config
                # defs
                #print "defs: " + self.m_itemDefinitionGroup[config]
                defs = ""
                for d in self.m_itemDefinitionGroup[config].split(";"):
                    if False == d.startswith("%"):
                        defs += " -D" + d
                #print "defs: " + defs
                # includes
                incs = ""
                for i in self.m_includePath[config].split(";"):
                    if False == i.startswith("%"):
                        incs += " -I" + i
                #print "incs: " + incs
                # dump result
                for s in self.m_sourceFiles:
                    resultList.append((self.m_curProjDir, defs, incs, s))
                    #print "line: " + prj + ":" + self.m_curProjDir + ":" + defs + ":" + incs + ":" + s
        return resultList

class CmdRunner():
    m_numProc = 1
    m_projType = ""
    m_dbName = ""
    m_fileName = ""
    m_options = ""
    m_buildOptions = ""
    m_count = 0
    def __init__(self):
        self.m_numProc = 1
        self.m_projType = ""
        self.m_dbName = ""
        self.m_fileName = ""
        self.m_options = ""
        self.m_buildOptions = ""
        self.m_count = 0
        self.ParseArgs()

    def usage(self):
        print("usage: cmd [-vJ] [-j N] database_dir file_name")

    def ParseArgs(self):
        try:
            opts, args = getopt.getopt(sys.argv[1:], "j:Jt:e:vp", [])
        except getopt.GetoptError, err:
            print str(err) # will print something like "option -a not recognized"
            self.usage()
            sys.exit(1)
        output = None
        verbose = False
        for o, a in opts:
            if o in ("-j"):
                self.m_numProc = int(a)
            elif o in ("-J"):
                self.m_numProc = multiprocessing.cpu_count()
            elif o in ("-t"):
                self.m_projType = a
            elif o in ("-e"):
                self.m_options += " -e " + a
            elif o in ("-p"):
                self.m_options += " -p "
            elif o in ("-v"):
                logging.basicConfig(format='%(levelname)s: %(lineno)s: %(message)s', level=logging.INFO)
            else:
                assert False, "unhandled option"
        logging.info("NumProc: " + str(self.m_numProc))

        if len(args) != 2:
            self.usage()
            sys.exit(1)
        self.m_dbName = os.path.abspath(args[0])
        self.m_fileName = args[1]

    def RunOne(self, q, cmd):
        (rv, out) = commands.getstatusoutput(cmd)
        q.put(out)

    def Run(self):
        # determin project type
        parser = None
        if self.m_projType == "" or self.m_projType == "cmake":
            parser = CmakeJsonParser(self.m_dbName, self.m_fileName)
        elif self.m_projType == "vs":
            parser = VSParser(self.m_dbName, self.m_fileName)
        elif self.m_projType == "make":
            parser = MKParser(self.m_dbName, self.m_fileName)
        else:
            print("ERROR: wrong project type \"" + self.m_projType + "\" was specified")
            sys.exit(1)

        result = parser.Run()
        cmdList = []
        for r in result:
            dirname, defs, incs, filename = r
            cmd = "cd \"" + dirname + "\" && " + CXXTAGS + " " + self.m_options + " \"" + parser.GetDbDir() + "\" \"" + filename + "\" -- " + defs + " " + incs + self.m_buildOptions
            #print cmd
            #cmd = cmd.replace('"', '\\"')
            cmdList.append(cmd)

        total = len(cmdList)
        process_list = [None]*self.m_numProc
        q = multiprocessing.Queue()
        i = 0
        while True:
            if len(cmdList) == 0 and process_list == [None]*self.m_numProc:
                break
            if process_list[i] == None:
                if len(cmdList) != 0:
                    cmd = cmdList.pop(0)
                    self.m_count += 1
                    print "#" + str(self.m_count) + "/" + str(total) + ":" + cmd
                    process_list[i] = multiprocessing.Process(target=self.RunOne, args=(q, cmd))
                    process_list[i].start()
                    #print "start: " + cmd
            elif False == process_list[i].is_alive():
                process_list[i].join()
                process_list[i] = None
                out = q.get()
                if out != "":
                    print out
            i += 1
            if i >= self.m_numProc:
                i = 0
            time.sleep(0.001)
        commands.getstatusoutput("cxxtags_query dryrun " + parser.GetDbDir())

"""
" start
"""
CmdRunner().Run()
